/*
This file was automatically generated by Papyrus-2-Typescript.exe
https://github.com/CarlosLeyvaAyala/Papyrus-2-Typescript

The program has no way to know the intention of the humans that made
the scripts, so it's always advisable to manually check all generated
files to make sure everything is declared as it should.

Take note the program assumes this script exists in some subfolder
to the folder where `skyrimPlatform.ts` is found, otherwise you'll get
"Cannot find module..." type of errors.

If you want to have this script in some other place, just change the
relative path of each `import`.
*/

import * as sp from "../skyrimPlatform"
import { FormList } from "../skyrimPlatform"
import { Form } from "../skyrimPlatform"

/** Ordered collection of values (value is float, integer, string, form or another container).
    Inherits JValue functionality */
const sn = (sp as any).JArray

/** creates new container object. returns container's identifier (unique integer number). */
export const object = (): number => sn.object()

/** Creates a new array of given size, filled with empty (None) items */
export const objectWithSize = (size: number): number => sn.objectWithSize(size)

/** Creates a new array that contains given values
    objectWithBooleans converts booleans into integers */
export const objectWithInts = (values: number[]): number => sn.objectWithInts(values)
export const objectWithStrings = (values: string[]): number => sn.objectWithStrings(values)
export const objectWithFloats = (values: number[]): number => sn.objectWithFloats(values)
export const objectWithBooleans = (values: boolean[]): number => sn.objectWithBooleans(values)
export const objectWithForms = (values: Form[]): number => sn.objectWithForms(values)

/** Creates a new array containing all the values from the source array in range [startIndex, endIndex) */
export const subArray = (object: number, startIndex: number, endIndex: number): number => sn.subArray(object,  startIndex,  endIndex)

/** Inserts the values from the source array into this array. If insertAtIndex is -1 (default behaviour) it appends to the end.
    negative index accesses items from the end of container counting backwards. */
export const addFromArray = (object: number, source: number, insertAtIndex: number = -1): void => sn.addFromArray(object,  source,  insertAtIndex)
export const addFromFormList = (object: number, source: FormList | null | undefined, insertAtIndex: number = -1): void => sn.addFromFormList(object,  source,  insertAtIndex)

/** Returns the item at the index of the array.
    negative index accesses items from the end of container counting backwards. */
export const getInt = (object: number, index: number, defaultVal: number = 0): number => sn.getInt(object,  index,  defaultVal)
export const getFlt = (object: number, index: number, defaultVal: number = 0.0): number => sn.getFlt(object,  index,  defaultVal)
export const getStr = (object: number, index: number, defaultVal: string = ""): string => sn.getStr(object,  index,  defaultVal)
export const getObj = (object: number, index: number, defaultVal: number = 0): number => sn.getObj(object,  index,  defaultVal)
export const getForm = (object: number, index: number, defaultVal: Form | null | undefined = null): Form | null | undefined => sn.getForm(object,  index,  defaultVal)

/** Copy all items to new native Papyrus array of dynamic size.
    Items not matching the requested type will have default
    values as the ones from the getInt/Flt/Str/Form functions. */
export const asIntArray = (object: number): number => sn.asIntArray(object)
export const asFloatArray = (object: number): number => sn.asFloatArray(object)
export const asStringArray = (object: number): string => sn.asStringArray(object)
export const asFormArray = (object: number): Form | null | undefined => sn.asFormArray(object)

/** Returns the index of the first found value/container that equals to given the value/container (default behaviour if searchStartIndex is 0).
    If nothing was found it returns -1.
    @searchStartIndex - index of the array where to start search
    negative index accesses items from the end of container counting backwards. */
export const findInt = (object: number, value: number, searchStartIndex: number = 0): number => sn.findInt(object,  value,  searchStartIndex)
export const findFlt = (object: number, value: number, searchStartIndex: number = 0): number => sn.findFlt(object,  value,  searchStartIndex)
export const findStr = (object: number, value: string, searchStartIndex: number = 0): number => sn.findStr(object,  value,  searchStartIndex)
export const findObj = (object: number, container: number, searchStartIndex: number = 0): number => sn.findObj(object,  container,  searchStartIndex)
export const findForm = (object: number, value: Form | null | undefined, searchStartIndex: number = 0): number => sn.findForm(object,  value,  searchStartIndex)

/** Returns the number of times given value was found in a JArray. */
export const countInteger = (object: number, value: number): number => sn.countInteger(object,  value)
export const countFloat = (object: number, value: number): number => sn.countFloat(object,  value)
export const countString = (object: number, value: string): number => sn.countString(object,  value)
export const countObject = (object: number, container: number): number => sn.countObject(object,  container)
export const countForm = (object: number, value: Form | null | undefined): number => sn.countForm(object,  value)

/** Replaces existing value at the @index of the array with the new @value.
    negative index accesses items from the end of container counting backwards. */
export const setInt = (object: number, index: number, value: number): void => sn.setInt(object,  index,  value)
export const setFlt = (object: number, index: number, value: number): void => sn.setFlt(object,  index,  value)
export const setStr = (object: number, index: number, value: string): void => sn.setStr(object,  index,  value)
export const setObj = (object: number, index: number, container: number): void => sn.setObj(object,  index,  container)
export const setForm = (object: number, index: number, value: Form | null | undefined): void => sn.setForm(object,  index,  value)

/** Appends the @value/@container to the end of the array.
    If @addToIndex >= 0 it inserts value at given index. negative index accesses items from the end of container counting backwards. */
export const addInt = (object: number, value: number, addToIndex: number = -1): void => sn.addInt(object,  value,  addToIndex)
export const addFlt = (object: number, value: number, addToIndex: number = -1): void => sn.addFlt(object,  value,  addToIndex)
export const addStr = (object: number, value: string, addToIndex: number = -1): void => sn.addStr(object,  value,  addToIndex)
export const addObj = (object: number, container: number, addToIndex: number = -1): void => sn.addObj(object,  container,  addToIndex)
export const addForm = (object: number, value: Form | null | undefined, addToIndex: number = -1): void => sn.addForm(object,  value,  addToIndex)

/** Returns count of the items in the array */
export const count = (object: number): number => sn.count(object)

/** Removes all the items from the array */
export const clear = (object: number): void => sn.clear(object)

/** Erases the item at the index. negative index accesses items from the end of container counting backwards. */
export const eraseIndex = (object: number, index: number): void => sn.eraseIndex(object,  index)

/** Erases [first, last] index range of the items. negative index accesses items from the end of container counting backwards.
    For ex. with [1,-1] range it will erase everything except the first item */
export const eraseRange = (object: number, first: number, last: number): void => sn.eraseRange(object,  first,  last)

/** Erase all elements of given value. Returns the number of erased elements. */
export const eraseInteger = (object: number, value: number): number => sn.eraseInteger(object,  value)
export const eraseFloat = (object: number, value: number): number => sn.eraseFloat(object,  value)
export const eraseString = (object: number, value: string): number => sn.eraseString(object,  value)
export const eraseObject = (object: number, container: number): number => sn.eraseObject(object,  container)
export const eraseForm = (object: number, value: Form | null | undefined): number => sn.eraseForm(object,  value)

/** Returns type of the value at the @index. negative index accesses items from the end of container counting backwards.
    0 - no value, 1 - none, 2 - int, 3 - float, 4 - form, 5 - object, 6 - string */
export const valueType = (object: number, index: number): number => sn.valueType(object,  index)

/** Exchanges the items at @index1 and @index2. negative index accesses items from the end of container counting backwards. */
export const swapItems = (object: number, index1: number, index2: number): void => sn.swapItems(object,  index1,  index2)

/** Sorts the items into ascending order (none < int < float < form < object < string). Returns the array itself */
export const sort = (object: number): number => sn.sort(object)

/** Sorts the items, removes duplicates. Returns array itself. You can treat it as JSet now */
export const unique = (object: number): number => sn.unique(object)

/** Reverse the order of elements. Returns the array itself. */
export const reverse = (object: number): number => sn.reverse(object)

/** Writes the array's items into the @targetArray array starting at @destIndex
     @writeAtIdx -    [-1, 0] - writes all the items in reverse order
       [0, -1] - writes all the items in straight order
       [1, 3] - writes 3 items in straight order */
export const writeToIntegerPArray = (object: number, targetArray: number[], writeAtIdx: number = 0, stopWriteAtIdx: number = -1, readIdx: number = 0, defaultValRead: number = 0): boolean => sn.writeToIntegerPArray(object,  targetArray,  writeAtIdx,  stopWriteAtIdx,  readIdx,  defaultValRead)
export const writeToFloatPArray = (object: number, targetArray: number[], writeAtIdx: number = 0, stopWriteAtIdx: number = -1, readIdx: number = 0, defaultValRead: number = 0.0): boolean => sn.writeToFloatPArray(object,  targetArray,  writeAtIdx,  stopWriteAtIdx,  readIdx,  defaultValRead)
export const writeToFormPArray = (object: number, targetArray: Form[], writeAtIdx: number = 0, stopWriteAtIdx: number = -1, readIdx: number = 0, defaultValRead: Form | null | undefined = null): boolean => sn.writeToFormPArray(object,  targetArray,  writeAtIdx,  stopWriteAtIdx,  readIdx,  defaultValRead)
export const writeToStringPArray = (object: number, targetArray: string[], writeAtIdx: number = 0, stopWriteAtIdx: number = -1, readIdx: number = 0, defaultValRead: string = ""): boolean => sn.writeToStringPArray(object,  targetArray,  writeAtIdx,  stopWriteAtIdx,  readIdx,  defaultValRead)
