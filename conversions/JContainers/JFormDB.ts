/*
This file was automatically generated by Papyrus-2-Typescript.exe
https://github.com/CarlosLeyvaAyala/Papyrus-2-Typescript

The program has no way to know the intention of the humans that made
the scripts, so it's always advisable to manually check all generated
files to make sure everything is declared as it should.

Take note the program assumes this script exists in some subfolder
to the folder where `skyrimPlatform.ts` is found, otherwise you'll get
"Cannot find module..." type of errors.

If you want to have this script in some other place, just change the
relative path of each `import`.
*/

import * as sp from "../skyrimPlatform"
import { Form } from "../skyrimPlatform"

/** Manages form related information (entry). */
const sn = (sp as any).JFormDB

/** associates given form key and entry (container). set entry to zero to destroy association */
export const setEntry = (storageName: string, fKey: Form | null | undefined, entry: number): void => sn.setEntry(storageName,  fKey,  entry)

/** returns (or creates new if not found) JMap entry for given storage and form */
export const makeEntry = (storageName: string, fKey: Form | null | undefined): number => sn.makeEntry(storageName,  fKey)

/** search for entry for given storage and form */
export const findEntry = (storageName: string, fKey: Form | null | undefined): number => sn.findEntry(storageName,  fKey)

/** attempts to get value associated with path. */
export const solveFlt = (fKey: Form | null | undefined, path: string, defaultVal: number = 0.0): number => sn.solveFlt(fKey,  path,  defaultVal)
export const solveInt = (fKey: Form | null | undefined, path: string, defaultVal: number = 0): number => sn.solveInt(fKey,  path,  defaultVal)
export const solveStr = (fKey: Form | null | undefined, path: string, defaultVal: string = ""): string => sn.solveStr(fKey,  path,  defaultVal)
export const solveObj = (fKey: Form | null | undefined, path: string, defaultVal: number = 0): number => sn.solveObj(fKey,  path,  defaultVal)
export const solveForm = (fKey: Form | null | undefined, path: string, defaultVal: Form | null | undefined = null): Form | null | undefined => sn.solveForm(fKey,  path,  defaultVal)

/** Attempts to assign value. Returns false if no such path
    With 'createMissingKeys=true' it creates any missing path elements: JFormDB.solveIntSetter(formKey, ".frostfall.keyB", 10, true) creates {frostfall: {keyB: 10}} structure */
export const solveFltSetter = (fKey: Form | null | undefined, path: string, value: number, createMissingKeys: boolean = false): boolean => sn.solveFltSetter(fKey,  path,  value,  createMissingKeys)
export const solveIntSetter = (fKey: Form | null | undefined, path: string, value: number, createMissingKeys: boolean = false): boolean => sn.solveIntSetter(fKey,  path,  value,  createMissingKeys)
export const solveStrSetter = (fKey: Form | null | undefined, path: string, value: string, createMissingKeys: boolean = false): boolean => sn.solveStrSetter(fKey,  path,  value,  createMissingKeys)
export const solveObjSetter = (fKey: Form | null | undefined, path: string, value: number, createMissingKeys: boolean = false): boolean => sn.solveObjSetter(fKey,  path,  value,  createMissingKeys)
export const solveFormSetter = (fKey: Form | null | undefined, path: string, value: Form | null | undefined, createMissingKeys: boolean = false): boolean => sn.solveFormSetter(fKey,  path,  value,  createMissingKeys)

/** returns true, if capable resolve given path, e.g. it able to execute solve* or solver*Setter functions successfully */
export const hasPath = (fKey: Form | null | undefined, path: string): boolean => sn.hasPath(fKey,  path)

/** JMap-like interface functions:
    
    returns new array containing all keys */
export const allKeys = (fKey: Form | null | undefined, key: string): number => sn.allKeys(fKey,  key)

/** returns new array containing all values */
export const allValues = (fKey: Form | null | undefined, key: string): number => sn.allValues(fKey,  key)

/** returns value associated with key */
export const getInt = (fKey: Form | null | undefined, key: string): number => sn.getInt(fKey,  key)
export const getFlt = (fKey: Form | null | undefined, key: string): number => sn.getFlt(fKey,  key)
export const getStr = (fKey: Form | null | undefined, key: string): string => sn.getStr(fKey,  key)
export const getObj = (fKey: Form | null | undefined, key: string): number => sn.getObj(fKey,  key)
export const getForm = (fKey: Form | null | undefined, key: string): Form | null | undefined => sn.getForm(fKey,  key)

/** creates key-value association. replaces existing value if any */
export const setInt = (fKey: Form | null | undefined, key: string, value: number): void => sn.setInt(fKey,  key,  value)
export const setFlt = (fKey: Form | null | undefined, key: string, value: number): void => sn.setFlt(fKey,  key,  value)
export const setStr = (fKey: Form | null | undefined, key: string, value: string): void => sn.setStr(fKey,  key,  value)
export const setObj = (fKey: Form | null | undefined, key: string, container: number): void => sn.setObj(fKey,  key,  container)
export const setForm = (fKey: Form | null | undefined, key: string, value: Form | null | undefined): void => sn.setForm(fKey,  key,  value)
