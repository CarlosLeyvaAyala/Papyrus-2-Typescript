/*
This file was automatically generated by Papyrus-2-Typescript.exe
https://github.com/CarlosLeyvaAyala/Papyrus-2-Typescript

The program has no way to know the intention of the humans that made
the scripts, so it's always advisable to manually check all generated
files to make sure everything is declared as it should.

Take note the program assumes this script exists in some subfolder
to the folder where `skyrimPlatform.ts` is found, otherwise you'll get
"Cannot find module..." type of errors.

If you want to have this script in some other place, just change the
relative path of each `import`.
*/

import * as sp from "../skyrimPlatform"
import { Form } from "../skyrimPlatform"

/** Evaluates Lua code. Unstable API - I'm free to change or remove it anytime */
const sn = (sp as any).JLua

/** Evaluates piece of Lua code. The arguments are carried by @transport object.
    The @transport is any kind of object, not just JMap.
    If @minimizeLifetime is True the function will invoke JValue.zeroLifetime on the @transport object.
    It is more than wise to re-use @transport when evaluating lot of lua code at once.
    Returns @default value if evaluation fails.
    
    WARNING: You can transfer in/out from Lua only 24-bit integers with exact precision (+/- 16 777 216)
    Anything bigger or smaller than that will have "holes" due to how the floating point rounding works.
    
    Usage example:
    
        ; 7 from the end until 9 from the end. Returns "Lua" string
        string input = "Hello Lua user"
        string s = JLua.evaLuaStr("return string.sub(args.string, args.low, args.high)",\
            JLua.setStr("string",input, JLua.setInt("low",7, JLua.setInt("high",9 )))\
        ) */
export const evalLuaFlt = (luaCode: string, transport: number, defaultVal: number = 0.0, minimizeLifetime: boolean = true): number => sn.evalLuaFlt(luaCode,  transport,  defaultVal,  minimizeLifetime)
export const evalLuaInt = (luaCode: string, transport: number, defaultVal: number = 0, minimizeLifetime: boolean = true): number => sn.evalLuaInt(luaCode,  transport,  defaultVal,  minimizeLifetime)
export const evalLuaStr = (luaCode: string, transport: number, defaultVal: string = "", minimizeLifetime: boolean = true): string => sn.evalLuaStr(luaCode,  transport,  defaultVal,  minimizeLifetime)
export const evalLuaObj = (luaCode: string, transport: number, defaultVal: number = 0, minimizeLifetime: boolean = true): number => sn.evalLuaObj(luaCode,  transport,  defaultVal,  minimizeLifetime)
export const evalLuaForm = (luaCode: string, transport: number, defaultVal: Form | null | undefined = null, minimizeLifetime: boolean = true): Form | null | undefined => sn.evalLuaForm(luaCode,  transport,  defaultVal,  minimizeLifetime)

/** Inserts new (or replaces existing) {key -> value} pair. Expects that @transport is JMap object, if @transport is 0 it creates new JMap object.
    Returns @transport */
export const setStr = (key: string, value: string, transport: number = 0): number => sn.setStr(key,  value,  transport)
export const setFlt = (key: string, value: number, transport: number = 0): number => sn.setFlt(key,  value,  transport)
export const setInt = (key: string, value: number, transport: number = 0): number => sn.setInt(key,  value,  transport)
export const setForm = (key: string, value: Form | null | undefined, transport: number = 0): number => sn.setForm(key,  value,  transport)
export const setObj = (key: string, value: number, transport: number = 0): number => sn.setObj(key,  value,  transport)
