/*
==============================================
Typescript definitions for v1.0.8.1
==============================================

***********************************************************************
 
This file was automatically generated by Papyrus-2-Typescript.exe
https://github.com/CarlosLeyvaAyala/Papyrus-2-Typescript

The program has no way to know the intention of the humans that made
the scripts, so it's always advisable to manually check all generated
files to make sure everything is declared as it should.
*/

import * as sp from "skyrimPlatform"

import { Actor } from "skyrimPlatform"
import { Ammo } from "skyrimPlatform"
import { Faction } from "skyrimPlatform"
import { Form } from "skyrimPlatform"
import { FormList } from "skyrimPlatform"
import { Keyword } from "skyrimPlatform"
import { ObjectReference } from "skyrimPlatform"
import { Perk } from "skyrimPlatform"
import { Race } from "skyrimPlatform"
import { Spell } from "skyrimPlatform"

const sn = (sp as any).LibFire
/** Actor
*/

/** Returns the index of the first keyword in `argKeywords` assigned to `akActor` - if not found, -1 is returned */
export const ActorFindAnyKeyword = (akActor: Actor | null, argKeywords: (Keyword | null)[] | null): number => sn.ActorFindAnyKeyword(akActor, argKeywords)

/** Returns the index of the first perk in `argPerks` assigned to `akActor` - if not found, -1 is returned */
export const ActorFindAnyPerk = (akActor: Actor | null, argPerks: (Perk | null)[] | null): number => sn.ActorFindAnyPerk(akActor, argPerks)

/** Returns whether `akActor` has any keyword in `akKeywords` */
export const ActorHasAnyKeyword = (akActor: Actor | null, akKeywords: FormList | null): boolean => sn.ActorHasAnyKeyword(akActor, akKeywords)

/** Returns whether `akActor` has `akPerk` and its rank is `aiRank` - if match not found, `False` is returned */
export const ActorHasPerkRank = (akActor: Actor | null, akPerk: Perk | null, aiRank: number): boolean => sn.ActorHasPerkRank(akActor, akPerk, aiRank)

/** Returns whether `akActor` is commanded by `akOtherActor` */
export const ActorIsCommandedBy = (akActor: Actor | null, akOtherActor: Actor | null): boolean => sn.ActorIsCommandedBy(akActor, akOtherActor)

/** Returns whether `akActor` is commanded by the player */
export const ActorIsCommandedByPlayer = (akActor: Actor | null): boolean => sn.ActorIsCommandedByPlayer(akActor)

/** Returns whether `akActor` is a teammate or player-controlled commanded/summoned actor */
export const ActorIsFollower = (akActor: Actor | null): boolean => sn.ActorIsFollower(akActor)

/** Returns whether `akActor` is a member of any faction in `akFactions` with a rank greater than -1 */
export const ActorIsInAnyFaction = (akActor: Actor | null, akFactions: FormList | null): boolean => sn.ActorIsInAnyFaction(akActor, akFactions)

/** Returns whether `akActor` is a member of `akFaction` with a rank greater than -1 */
export const ActorIsInFaction = (akActor: Actor | null, akFaction: Faction | null): boolean => sn.ActorIsInFaction(akActor, akFaction)

/** Returns whether `akActor` is a summoned actor */
export const ActorIsSummoned = (akActor: Actor | null): boolean => sn.ActorIsSummoned(akActor)

/** Returns the current rank of `akPerk` assigned to `akActor` - if perk not assigned, -1 is returned */
export const GetActorPerkRank = (akActor: Actor | null, akPerk: Perk | null): number => sn.GetActorPerkRank(akActor, akPerk)

/** Returns an array of perks assigned to `akActor` */
export const GetActorPerks = (akActor: Actor | null): (Perk | null)[] => sn.GetActorPerks(akActor)

/** Returns an array of commanded actors for `akActor` or `None` */
export const GetCommandedActors = (akActor: Actor | null): (Actor | null)[] => sn.GetCommandedActors(akActor)

/** Returns the commanding actor for `akActor` when actor is commanded */
export const GetCommandingActor = (akActor: Actor | null): Actor | null => sn.GetCommandingActor(akActor)

/** Returns the ammo currently used by `akActor` */
export const GetEquippedAmmo = (akActor: Actor | null): Ammo | null => sn.GetEquippedAmmo(akActor)
/** Faction
*/

/** Sets `akFaction` as ally or friend to each faction in `akFactions` */
export const SetAllies = (akFaction: Faction | null, akFactions: FormList | null, abSelfIsFriendToOther: boolean = false, abOtherIsFriendToSelf: boolean = false): void => sn.SetAllies(akFaction, akFactions, abSelfIsFriendToOther, abOtherIsFriendToSelf)

/** Sets `akFaction` as enemy or neutral to each faction in `akFactions` */
export const SetEnemies = (akFaction: Faction | null, akFactions: FormList | null, abSelfIsNeutralToOther: boolean = false, abOtherIsNeutralToSelf: boolean = false): void => sn.SetEnemies(akFaction, akFactions, abSelfIsNeutralToOther, abOtherIsNeutralToSelf)
/** FormList
*/

/** Returns whether `akHaystack` contains each form in `argNeedles` */
export const SearchListForForms = (akHaystack: FormList | null, argNeedles: (Form | null)[] | null): boolean[] => sn.SearchListForForms(akHaystack, argNeedles)

/** Returns whether each formlist in `akHaystack` contains `akNeedle` */
export const SearchListsForForm = (akHaystack: FormList | null, akNeedle: Form | null): boolean[] => sn.SearchListsForForm(akHaystack, akNeedle)
/** ObjectReference
*/

/** Returns actors in loaded cells within `afRadius` of `akOrigin` */
export const FindNearbyActors = (akOrigin: ObjectReference | null, afRadius: number): (Actor | null)[] => sn.FindNearbyActors(akOrigin, afRadius)

/** Returns books in loaded cells within `afRadius` of `akOrigin` */
export const FindNearbyBooks = (akOrigin: ObjectReference | null, afRadius: number): (ObjectReference | null)[] => sn.FindNearbyBooks(akOrigin, afRadius)

/** Returns commanded actors in loaded cells within `afRadius` of `akOrigin` who are controlled by `akOrigin` */
export const FindNearbyCommandedActors = (akOrigin: ObjectReference | null, afRadius: number): (Actor | null)[] => sn.FindNearbyCommandedActors(akOrigin, afRadius)

/** Returns teammates and player-controlled commanded/summoned actors in loaded cells within `afRadius` of player */
export const FindNearbyFollowers = (afRadius: number): (Actor | null)[] => sn.FindNearbyFollowers(afRadius)

/** Returns summoned actors in loaded cells within `afRadius` of `akOrigin` */
export const FindNearbySummons = (akOrigin: ObjectReference | null, afRadius: number): (Actor | null)[] => sn.FindNearbySummons(akOrigin, afRadius)

/** Returns teammates in loaded cells within `afRadius` of player */
export const FindNearbyTeammates = (afRadius: number): (Actor | null)[] => sn.FindNearbyTeammates(afRadius)

/** Returns the permanent value of `asActorValue` for `akActor` */
export const GetPermanentActorValue = (akActor: ObjectReference | null, asActorValue: string): number => sn.GetPermanentActorValue(akActor, asActorValue)
/** Race
*/

/** Returns the skill boost value of `asActorValue` for `akRace` */
export const GetRaceSkillBonus = (akRace: Race | null, asActorValue: string): number => sn.GetRaceSkillBonus(akRace, asActorValue)

/** Returns names of boosted actor values for `akRace` */
export const GetRaceSkills = (akRace: Race | null): string[] => sn.GetRaceSkills(akRace)

/** Returns the base male height for `akRace` */
export const GetRaceMaleHeight = (akRace: Race | null): number => sn.GetRaceMaleHeight(akRace)

/** Returns the base female height for `akRace` */
export const GetRaceFemaleHeight = (akRace: Race | null): number => sn.GetRaceFemaleHeight(akRace)

/** Returns the base male weight for `akRace` */
export const GetRaceMaleWeight = (akRace: Race | null): number => sn.GetRaceMaleWeight(akRace)

/** Returns the base female weight for `akRace` */
export const GetRaceFemaleWeight = (akRace: Race | null): number => sn.GetRaceFemaleWeight(akRace)

/** Returns the starting health for `akRace` */
export const GetRaceStartingHealth = (akRace: Race | null): number => sn.GetRaceStartingHealth(akRace)

/** Returns the starting magicka for `akRace` */
export const GetRaceStartingMagicka = (akRace: Race | null): number => sn.GetRaceStartingMagicka(akRace)

/** Returns the starting stamina for `akRace` */
export const GetRaceStartingStamina = (akRace: Race | null): number => sn.GetRaceStartingStamina(akRace)

/** Returns the base carry weight for `akRace` */
export const GetRaceCarryWeight = (akRace: Race | null): number => sn.GetRaceCarryWeight(akRace)

/** Returns the base mass for `akRace` */
export const GetRaceMass = (akRace: Race | null): number => sn.GetRaceMass(akRace)

/** Returns the base health regen for `akRace` */
export const GetRaceHealthRegen = (akRace: Race | null): number => sn.GetRaceHealthRegen(akRace)

/** Returns the base magicka regen for `akRace` */
export const GetRaceMagickaRegen = (akRace: Race | null): number => sn.GetRaceMagickaRegen(akRace)

/** Returns the base stamina regen for `akRace` */
export const GetRaceStaminaRegen = (akRace: Race | null): number => sn.GetRaceStaminaRegen(akRace)

/** Returns the base unarmed damage for `akRace` */
export const GetRaceUnarmedDamage = (akRace: Race | null): number => sn.GetRaceUnarmedDamage(akRace)

/** Returns the base unarmed reach for `akRace` */
export const GetRaceUnarmedReach = (akRace: Race | null): number => sn.GetRaceUnarmedReach(akRace)
/** String
*/

/** Returns whether `asText` contains `asSubText` (all Papyrus string comparisons are case-insensitive) */
export const ContainsText = (asText: string, asSubText: string): boolean => sn.ContainsText(asText, asSubText)

/** Replaces `{}` tokens in `asFormat` with `argValues` (supports up to 9 values)
* Note: Arrays exceeding the maximum number of values will be truncated.
* Syntax: https://fmt.dev/latest/syntax.html
*/
export const FormatFloat = (asFormat: string, argValues: number[]): string => sn.FormatFloat(asFormat, argValues)

/** Replaces `{}` tokens in `asFormat` with `argValues` (supports up to 9 values)
* Note: Arrays exceeding the maximum number of values will be truncated.
* Syntax: https://fmt.dev/latest/syntax.html
*/
export const FormatInt = (asFormat: string, argValues: number[]): string => sn.FormatInt(asFormat, argValues)

/** Replaces `{}` tokens in `asFormat` with `argValues` (supports up to 9 values)
* Note: Arrays exceeding the maximum number of values will be truncated.
* Syntax: https://fmt.dev/latest/syntax.html
*/
export const FormatString = (asFormat: string, argValues: string[]): string => sn.FormatString(asFormat, argValues)

/** Returns the hexadecimal string representation of `aiSource` */
export const IntToHex = (aiSource: number): string => sn.IntToHex(aiSource)

/** Returns `asSource` as array of String split by `asDelimiter` */
export const SplitString = (asSource: string, asDelimiter: string): string[] => sn.SplitString(asSource, asDelimiter)

/** Returns `asSource` as array of Float split by `asDelimiter` */
export const StrToFloatArray = (asSource: string, asDelimiter: string): number[] => sn.StrToFloatArray(asSource, asDelimiter)

/** Returns `asSource` as array of Int split by `asDelimiter` */
export const StrToIntArray = (asSource: string, asDelimiter: string): number[] => sn.StrToIntArray(asSource, asDelimiter)

/** Returns `asSource` wrapped to column `aiMaxLength` with lines delimited by newline character */
export const WrapString = (asSource: string, aiMaxLength: number): string => sn.WrapString(asSource, aiMaxLength)
/** Spell
*/

/** Returns highest minimum skill level for `akSpell` (does not account for conditions) */
export const GetHighestMinSkillLevelForSpell = (akSpell: Spell | null): number => sn.GetHighestMinSkillLevelForSpell(akSpell)
/** Time
*/

/** Returns hours passed since current day began */
export const GetCurrentHourOfDay = (): number => sn.GetCurrentHourOfDay()
