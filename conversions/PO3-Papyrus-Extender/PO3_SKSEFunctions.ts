/*
==============================================
Typescript definitions for v5.1
==============================================

***********************************************************************
 
This file was automatically generated by Papyrus-2-Typescript.exe
https://github.com/CarlosLeyvaAyala/Papyrus-2-Typescript

The program has no way to know the intention of the humans that made
the scripts, so it's always advisable to manually check all generated
files to make sure everything is declared as it should.
*/

import * as sp from "skyrimPlatform"

import { ActiveMagicEffect } from "skyrimPlatform"
import { Actor } from "skyrimPlatform"
import { ActorBase } from "skyrimPlatform"
import { Alias } from "skyrimPlatform"
import { Ammo } from "skyrimPlatform"
import { Armor } from "skyrimPlatform"
import { ArmorAddon } from "skyrimPlatform"
import { Art } from "skyrimPlatform"
import { AssociationType } from "skyrimPlatform"
import { Book } from "skyrimPlatform"
import { Cell } from "skyrimPlatform"
import { ColorForm } from "skyrimPlatform"
import { EffectShader } from "skyrimPlatform"
import { Enchantment } from "skyrimPlatform"
import { Faction } from "skyrimPlatform"
import { Form } from "skyrimPlatform"
import { FormList } from "skyrimPlatform"
import { Furniture } from "skyrimPlatform"
import { Hazard } from "skyrimPlatform"
import { Idle } from "skyrimPlatform"
import { ImageSpaceModifier } from "skyrimPlatform"
import { ImpactDataSet } from "skyrimPlatform"
import { Keyword } from "skyrimPlatform"
import { LeveledItem } from "skyrimPlatform"
import { Light } from "skyrimPlatform"
import { Location } from "skyrimPlatform"
import { MagicEffect } from "skyrimPlatform"
import { ObjectReference } from "skyrimPlatform"
import { Package } from "skyrimPlatform"
import { Perk } from "skyrimPlatform"
import { Potion } from "skyrimPlatform"
import { Projectile } from "skyrimPlatform"
import { Quest } from "skyrimPlatform"
import { Race } from "skyrimPlatform"
import { Scroll } from "skyrimPlatform"
import { Sound } from "skyrimPlatform"
import { SoundDescriptor } from "skyrimPlatform"
import { Spell } from "skyrimPlatform"
import { TextureSet } from "skyrimPlatform"
import { VisualEffect } from "skyrimPlatform"
import { Weather } from "skyrimPlatform"

export declare class Debris extends Form {}
export declare class FootstepSet extends Form {}
export declare class LightingTemplate extends Form {}
export declare class MaterialObject extends Form {}

const sn = (sp as any).PO3_SKSEFunctions

/** DOCUMENTATION IS AVAILABLE AT https://github.com/powerof3/PapyrusExtenderSSE/wiki
* ----------------------------------------------------------------------------------------------------------
* ACTIVE EFFECT
* ----------------------------------------------------------------------------------------------------------
*/
	
export const IsScriptAttachedToActiveEffect = (akActiveEffect: ActiveMagicEffect | null, asScriptName: string): boolean => sn.IsScriptAttachedToActiveEffect(akActiveEffect, asScriptName)

/** ----------------------------------------------------------------------------------------------------------
* ACTORS
* ----------------------------------------------------------------------------------------------------------
* -------
* GETTERS
* -------
*/
	 
export const GetActiveEffects = (akActor: Actor | null, abShowInactive: boolean = false): (MagicEffect | null)[] => sn.GetActiveEffects(akActor, abShowInactive)
	
export const GetActorAlpha = (akActor: Actor | null): number => sn.GetActorAlpha(akActor)
	
export const GetActorRefraction = (akActor: Actor | null): number => sn.GetActorRefraction(akActor)
	
export const GetActorState = (akActor: Actor | null): number => sn.GetActorState(akActor)
	
export const GetActorSoulSize = (akActor: Actor | null): number => sn.GetActorSoulSize(akActor)
	
export const GetActorValueModifier = (akActor: Actor | null, aiModifier: number, asActorValue: string): number => sn.GetActorValueModifier(akActor, aiModifier, asActorValue)
	
export const GetCriticalStage = (akActor: Actor | null): number => sn.GetCriticalStage(akActor)
		
export const GetCombatAllies = (akActor: Actor | null): (Actor | null)[] => sn.GetCombatAllies(akActor)
	
export const GetCombatTargets = (akActor: Actor | null): (Actor | null)[] => sn.GetCombatTargets(akActor)
	
export const GetCommandedActors = (akActor: Actor | null): (Actor | null)[] => sn.GetCommandedActors(akActor)
	
export const GetCommandingActor = (akActor: Actor | null): Actor | null => sn.GetCommandingActor(akActor)
	
export const GetEquippedAmmo = (akActor: Actor | null): Ammo | null => sn.GetEquippedAmmo(akActor)

export const GetEquippedWeaponIsPoisoned = (akActor: Actor | null, abLeftHand: boolean): boolean => sn.GetEquippedWeaponIsPoisoned(akActor, abLeftHand)
	
export const GetEquippedWeaponPoison = (akActor: Actor | null, abLeftHand: boolean): Potion | null => sn.GetEquippedWeaponPoison(akActor, abLeftHand)
	
export const GetEquippedWeaponPoisonCount = (akActor: Actor | null, abLeftHand: boolean): number => sn.GetEquippedWeaponPoisonCount(akActor, abLeftHand)
	
export const GetHairColor = (akActor: Actor | null): ColorForm | null => sn.GetHairColor(akActor)
	
export const GetHeadPartTextureSet = (akActor: Actor | null, aiType: number): TextureSet | null => sn.GetHeadPartTextureSet(akActor, aiType)
	
export const GetLocalGravityActor = (akActor: Actor | null): number => sn.GetLocalGravityActor(akActor)
	
export const GetMount = (akActor: Actor | null): Actor | null => sn.GetMount(akActor)
	
export const GetObjectUnderFeet = (akActor: Actor | null): ObjectReference | null => sn.GetObjectUnderFeet(akActor)
	
export const GetOffersServices = (akActor: Actor | null): boolean => sn.GetOffersServices(akActor)
	
export const GetRider = (akActor: Actor | null): Actor | null => sn.GetRider(akActor)
	
export const GetRunningPackage = (akActor: Actor | null): Package | null => sn.GetRunningPackage(akActor)
	
export const GetSkinColor = (akActor: Actor | null): ColorForm | null => sn.GetSkinColor(akActor)
		
export const GetTimeDead = (akActor: Actor | null): number => sn.GetTimeDead(akActor)
	
export const GetTimeOfDeath = (akActor: Actor | null): number => sn.GetTimeOfDeath(akActor)
	
export const GetVendorFaction = (akActor: Actor | null): Faction | null => sn.GetVendorFaction(akActor)
	
export const HasActiveSpell = (akActor: Actor | null, akSpell: Spell | null): boolean => sn.HasActiveSpell(akActor, akSpell)
		
export const HasDeferredKill = (akActor: Actor | null): boolean => sn.HasDeferredKill(akActor)
	
export const HasMagicEffectWithArchetype = (akActor: Actor | null, asArchetype: string): boolean => sn.HasMagicEffectWithArchetype(akActor, asArchetype)
	
export const HasSkin = (akActor: Actor | null, akArmorToCheck: Armor | null): boolean => sn.HasSkin(akActor, akArmorToCheck)
	
export const IsActorInWater = (akActor: Actor | null): boolean => sn.IsActorInWater(akActor)
	
export const IsActorUnderwater = (akActor: Actor | null): boolean => sn.IsActorUnderwater(akActor)
	
export const IsLimbGone = (akActor: Actor | null, aiLimb: number): boolean => sn.IsLimbGone(akActor, aiLimb)
	
export const IsQuadruped = (akActor: Actor | null): boolean => sn.IsQuadruped(akActor)

export const IsSoulTrapped = (akActor: Actor | null): boolean => sn.IsSoulTrapped(akActor)

/** -------
* SETTERS
* -------
*/
	
export const AddAllEquippedItemsToArray = (akActor: Actor | null): (Form | null)[] => sn.AddAllEquippedItemsToArray(akActor)
	
export const AddBasePerk = (akActor: Actor | null, akPerk: Perk | null): boolean => sn.AddBasePerk(akActor, akPerk)
	
export const AddBaseSpell = (akActor: Actor | null, akSpell: Spell | null): boolean => sn.AddBaseSpell(akActor, akSpell)
	
export const BlendColorWithSkinTone = (akActor: Actor | null, akColor: ColorForm | null, aiBlendMode: number, abAutoLuminance: boolean, afOpacity: number): void => sn.BlendColorWithSkinTone(akActor, akColor, aiBlendMode, abAutoLuminance, afOpacity)
		
export const DecapitateActor = (akActor: Actor | null): void => sn.DecapitateActor(akActor)

export const FreezeActor = (akActor: Actor | null, type: number, abFreeze: boolean): void => sn.FreezeActor(akActor, type, abFreeze)
		
export const KillNoWait = (akActor: Actor | null): void => sn.KillNoWait(akActor)
	
/**DEPECRIATED */
export const MixColorWithSkinTone = (akActor: Actor | null, akColor: ColorForm | null, abManualMode: boolean, afPercentage: number): void => sn.MixColorWithSkinTone(akActor, akColor, abManualMode, afPercentage)
		
export const RemoveAddedSpells = (akActor: Actor | null, modName: string, keywords: (Keyword | null)[] | null, abMatchAll: boolean): void => sn.RemoveAddedSpells(akActor, modName, keywords, abMatchAll)
	
export const RemoveBasePerk = (akActor: Actor | null, akPerk: Perk | null): boolean => sn.RemoveBasePerk(akActor, akPerk)
	
export const RemoveBaseSpell = (akActor: Actor | null, akSpell: Spell | null): boolean => sn.RemoveBaseSpell(akActor, akSpell)
		
export const ReplaceArmorTextureSet = (akActor: Actor | null, akArmor: Armor | null, akSourceTXST: TextureSet | null, akTargetTXST: TextureSet | null, aiTextureType: number = -1): void => sn.ReplaceArmorTextureSet(akActor, akArmor, akSourceTXST, akTargetTXST, aiTextureType)
	
export const ReplaceFaceTextureSet = (akActor: Actor | null, akMaleTXST: TextureSet | null, akFemaleTXST: TextureSet | null, aiTextureType: number = -1): void => sn.ReplaceFaceTextureSet(akActor, akMaleTXST, akFemaleTXST, aiTextureType)
	
export const ReplaceSkinTextureSet = (akActor: Actor | null, akMaleTXST: TextureSet | null, akFemaleTXST: TextureSet | null, aiSlotMask: number, aiTextureType: number = -1): void => sn.ReplaceSkinTextureSet(akActor, akMaleTXST, akFemaleTXST, aiSlotMask, aiTextureType)
	
export const ResetActor3D = (akActor: Actor | null, asFolderName: string): boolean => sn.ResetActor3D(akActor, asFolderName)
	
export const SetActorRefraction = (akActor: Actor | null, afRefraction: number): void => sn.SetActorRefraction(akActor, afRefraction)
	
export const SetHairColor = (akActor: Actor | null, akColor: ColorForm | null): void => sn.SetHairColor(akActor, akColor)
	
export const SetHeadPartAlpha = (akActor: Actor | null, aiPartType: number, afAlpha: number): void => sn.SetHeadPartAlpha(akActor, aiPartType, afAlpha)
	 
export const SetHeadPartTextureSet = (akActor: Actor | null, headpartTXST: TextureSet | null, aiType: number): void => sn.SetHeadPartTextureSet(akActor, headpartTXST, aiType)
	
export const SetLinearVelocity = (akActor: Actor | null, afX: number, afY: number, afZ: number): void => sn.SetLinearVelocity(akActor, afX, afY, afZ)
	
export const SetLocalGravityActor = (akActor: Actor | null, afValue: number, abDisableGravityOnGround: boolean): void => sn.SetLocalGravityActor(akActor, afValue, abDisableGravityOnGround)
	
export const SetSkinAlpha = (akActor: Actor | null, afAlpha: number): void => sn.SetSkinAlpha(akActor, afAlpha)
	
export const SetSkinColor = (akActor: Actor | null, akColor: ColorForm | null): void => sn.SetSkinColor(akActor, akColor)
	
export const SetSoulTrapped = (akActor: Actor | null, abTrapped: boolean): void => sn.SetSoulTrapped(akActor, abTrapped)
	
export const ToggleHairWigs = (akActor: Actor | null, abDisable: boolean): void => sn.ToggleHairWigs(akActor, abDisable)
	
export const UnequipAllOfType = (akActor: Actor | null, afArmorType: number, aiSlotsToSkip: number[]): void => sn.UnequipAllOfType(akActor, afArmorType, aiSlotsToSkip)

/** ----------------------------------------------------------------------------------------------------------
* ACTORBASE
* ----------------------------------------------------------------------------------------------------------
* -------
* GETTERS
* -------
*/
	
export const GetAssociationType = (akBase1: ActorBase | null, akBase2: ActorBase | null): AssociationType | null => sn.GetAssociationType(akBase1, akBase2)
	
export const GetDeathItem = (akBase: ActorBase | null): LeveledItem | null => sn.GetDeathItem(akBase)
	
export const GetNthPerk = (akBase: ActorBase | null, aiIndex: number): Perk | null => sn.GetNthPerk(akBase, aiIndex)
	
export const GetPerkCount = (akBase: ActorBase | null): number => sn.GetPerkCount(akBase)
	
export const GetRelationships = (akBase: ActorBase | null, akAssocType: AssociationType | null): (ActorBase | null)[] => sn.GetRelationships(akBase, akAssocType)

/** -------
* SETTERS
* -------
*/
	
export const SetDeathItem = (akBase: ActorBase | null, akLeveledItem: LeveledItem | null): void => sn.SetDeathItem(akBase, akLeveledItem)

/** ----------------------------------------------------------------------------------------------------------
* ALIAS
* ----------------------------------------------------------------------------------------------------------
*/
	
export const IsScriptAttachedToAlias = (akAlias: Alias | null, asScriptName: string): boolean => sn.IsScriptAttachedToAlias(akAlias, asScriptName)

/** ----------------------------------------------------------------------------------------------------------
* ARMOR/ADDONS
* ----------------------------------------------------------------------------------------------------------
*/
	
export const GetFootstepSet = (akArma: ArmorAddon | null): FootstepSet | null => sn.GetFootstepSet(akArma)
	
export const SetFootstepSet = (akArma: ArmorAddon | null, akFootstepSet: FootstepSet | null): void => sn.SetFootstepSet(akArma, akFootstepSet)

/** ----------------------------------------------------------------------------------------------------------
* ARRAYS
* ----------------------------------------------------------------------------------------------------------
*/
	
export const AddActorToArray = (akActor: Actor | null, actorArray: (Actor | null)[] | null): boolean => sn.AddActorToArray(akActor, actorArray)

export const AddStringToArray = (asString: string, asStrings: string[]): boolean => sn.AddStringToArray(asString, asStrings)

export const ArrayStringCount = (asString: string, asStrings: string[]): number => sn.ArrayStringCount(asString, asStrings)

export const SortArrayString = (asStrings: string[]): string[] => sn.SortArrayString(asStrings)
	
export const GetSortedActorNames = (akKeyword: Keyword | null, asPlural: string = "(s)", abInvertKeyword: boolean): string[] => sn.GetSortedActorNames(akKeyword, asPlural, abInvertKeyword)
	
export const GetSortedNPCNames = (aiActorBases: (ActorBase | null)[] | null, asPlural: string = "(s)"): string[] => sn.GetSortedNPCNames(aiActorBases, asPlural)

/** ----------------------------------------------------------------------------------------------------------
* BOOK
* ----------------------------------------------------------------------------------------------------------
*/
	
export const ClearReadFlag = (akBook: Book | null): void => sn.ClearReadFlag(akBook)
	
export const SetReadFlag = (akBook: Book | null): void => sn.SetReadFlag(akBook)

/** ----------------------------------------------------------------------------------------------------------
* CELL
* ----------------------------------------------------------------------------------------------------------
*/
	
export const GetCellNorthRotation = (akCell: Cell | null): number => sn.GetCellNorthRotation(akCell)
	
export const GetLightingTemplate = (akCell: Cell | null): LightingTemplate | null => sn.GetLightingTemplate(akCell)
	
export const SetLightingTemplate = (akCell: Cell | null, akLightingTemplate: LightingTemplate | null): void => sn.SetLightingTemplate(akCell, akLightingTemplate)
	
export const SetCellNorthRotation = (akCell: Cell | null, afAngle: number): void => sn.SetCellNorthRotation(akCell, afAngle)

/** ----------------------------------------------------------------------------------------------------------
* DEBUG
* ----------------------------------------------------------------------------------------------------------
*/
	
export const GivePlayerSpellBook = (): void => sn.GivePlayerSpellBook()
	
export const DumpAnimationVariables = (akActor: Actor | null, asAnimationVarPrefix: string): void => sn.DumpAnimationVariables(akActor, asAnimationVarPrefix)

/** ----------------------------------------------------------------------------------------------------------
* DETECTION
* ----------------------------------------------------------------------------------------------------------
*/
	
export const CanActorBeDetected = (akActor: Actor | null): number => sn.CanActorBeDetected(akActor)

export const CanActorDetect = (akActor: Actor | null): number => sn.CanActorDetect(akActor)

export const ForceActorDetection = (akActor: Actor | null): void => sn.ForceActorDetection(akActor)

export const ForceActorDetecting = (akActor: Actor | null): void => sn.ForceActorDetecting(akActor)
	
export const IsDetectedByAnyone = (akActor: Actor | null): boolean => sn.IsDetectedByAnyone(akActor)
	
export const PreventActorDetection = (akActor: Actor | null): void => sn.PreventActorDetection(akActor)

export const PreventActorDetecting = (akActor: Actor | null): void => sn.PreventActorDetecting(akActor)

export const ResetActorDetection = (akActor: Actor | null): void => sn.ResetActorDetection(akActor)

export const ResetActorDetecting = (akActor: Actor | null): void => sn.ResetActorDetecting(akActor)

/** ----------------------------------------------------------------------------------------------------------
* EFFECTSHADER
* ----------------------------------------------------------------------------------------------------------
* -------
* GETTERS
* -------
*/
	
export const GetAddonModels = (akEffectShader: EffectShader | null): Debris | null => sn.GetAddonModels(akEffectShader)
	
export const GetEffectShaderTotalCount = (akEffectShader: EffectShader | null, abActive: boolean): number => sn.GetEffectShaderTotalCount(akEffectShader, abActive)
	
export const IsEffectShaderFlagSet = (akEffectShader: EffectShader | null, aiFlag: number): boolean => sn.IsEffectShaderFlagSet(akEffectShader, aiFlag)
	
export const GetMembraneFillTexture = (akEffectShader: EffectShader | null): string => sn.GetMembraneFillTexture(akEffectShader)
	
export const GetMembraneHolesTexture = (akEffectShader: EffectShader | null): string => sn.GetMembraneHolesTexture(akEffectShader)
	
export const GetMembranePaletteTexture = (akEffectShader: EffectShader | null): string => sn.GetMembranePaletteTexture(akEffectShader)
	
export const GetParticleFullCount = (akEffectShader: EffectShader | null): number => sn.GetParticleFullCount(akEffectShader)
	
export const GetParticlePaletteTexture = (akEffectShader: EffectShader | null): string => sn.GetParticlePaletteTexture(akEffectShader)
	
export const GetParticleShaderTexture = (akEffectShader: EffectShader | null): string => sn.GetParticleShaderTexture(akEffectShader)
	
export const GetParticlePersistentCount = (akEffectShader: EffectShader | null): number => sn.GetParticlePersistentCount(akEffectShader)

/** -------
* SETTERS
* -------
*/
	
export const ClearEffectShaderFlag = (akEffectShader: EffectShader | null, aiFlag: number): void => sn.ClearEffectShaderFlag(akEffectShader, aiFlag)
	
export const SetAddonModels = (akEffectShader: EffectShader | null, akDebris: Debris | null): void => sn.SetAddonModels(akEffectShader, akDebris)
	
export const SetEffectShaderFlag = (akEffectShader: EffectShader | null, aiFlag: number): void => sn.SetEffectShaderFlag(akEffectShader, aiFlag)
	
export const SetMembraneColorKeyData = (akEffectShader: EffectShader | null, aiColorKey: number, aiRGB: number[], afAlpha: number, afTime: number): void => sn.SetMembraneColorKeyData(akEffectShader, aiColorKey, aiRGB, afAlpha, afTime)
	
export const SetMembraneFillTexture = (akEffectShader: EffectShader | null, asTextureName: string): void => sn.SetMembraneFillTexture(akEffectShader, asTextureName)
	
export const SetMembraneHolesTexture = (akEffectShader: EffectShader | null, asTextureName: string): void => sn.SetMembraneHolesTexture(akEffectShader, asTextureName)
	
export const SetMembranePaletteTexture = (akEffectShader: EffectShader | null, asTextureName: string): void => sn.SetMembranePaletteTexture(akEffectShader, asTextureName)
	
export const SetParticleColorKeyData = (akEffectShader: EffectShader | null, aiColorKey: number, aiRGB: number[], afAlpha: number, afTime: number): void => sn.SetParticleColorKeyData(akEffectShader, aiColorKey, aiRGB, afAlpha, afTime)
	
export const SetParticleFullCount = (akEffectShader: EffectShader | null, afParticleCount: number): void => sn.SetParticleFullCount(akEffectShader, afParticleCount)
	
export const SetParticlePaletteTexture = (akEffectShader: EffectShader | null, asTextureName: string): void => sn.SetParticlePaletteTexture(akEffectShader, asTextureName)
	
export const SetParticlePersistentCount = (akEffectShader: EffectShader | null, afParticleCount: number): void => sn.SetParticlePersistentCount(akEffectShader, afParticleCount)
	
export const SetParticleShaderTexture = (akEffectShader: EffectShader | null, asTextureName: string): void => sn.SetParticleShaderTexture(akEffectShader, asTextureName)

/** -----------------------------------------------------------------------------------------------------------
* ENCHANTMENT
* -----------------------------------------------------------------------------------------------------------
* --------
* GETTERS
* --------
*/

export const GetEnchantmentType = (akEnchantment: Enchantment | null): number => sn.GetEnchantmentType(akEnchantment)

/** --------
* SETTERS
* --------
*/
	
export const AddMagicEffectToEnchantment = (akEnchantment: Enchantment | null, akMagicEffect: MagicEffect | null, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0, asConditionList: string[]): void => sn.AddMagicEffectToEnchantment(akEnchantment, akMagicEffect, afMagnitude, aiArea, aiDuration, afCost, asConditionList)
	
export const AddEffectItemToEnchantment = (akEnchantment: Enchantment | null, akEnchantmentToCopyFrom: Enchantment | null, aiIndex: number, afCost: number = -1.0): void => sn.AddEffectItemToEnchantment(akEnchantment, akEnchantmentToCopyFrom, aiIndex, afCost)
	
export const RemoveMagicEffectFromEnchantment = (akEnchantment: Enchantment | null, akMagicEffect: MagicEffect | null, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0): void => sn.RemoveMagicEffectFromEnchantment(akEnchantment, akMagicEffect, afMagnitude, aiArea, aiDuration, afCost)
	
export const RemoveEffectItemFromEnchantment = (akEnchantment: Enchantment | null, akEnchantmentToMatchFrom: Enchantment | null, aiIndex: number): void => sn.RemoveEffectItemFromEnchantment(akEnchantment, akEnchantmentToMatchFrom, aiIndex)

/** ----------------------------------------------------------------------------------------------------------
* FACTION
* ----------------------------------------------------------------------------------------------------------
*/
		
export const GetVendorFactionContainer = (akVendorFaction: Faction | null): ObjectReference | null => sn.GetVendorFactionContainer(akVendorFaction)

/** ----------------------------------------------------------------------------------------------------------
* FORM
* ----------------------------------------------------------------------------------------------------------
* -------
* GETTERS
* -------
*/

export const EvaluateConditionList = (akForm: Form | null, akActionRef: ObjectReference | null, akTargetRef: ObjectReference | null): boolean => sn.EvaluateConditionList(akForm, akActionRef, akTargetRef)
	
export const ClearRecordFlag = (akForm: Form | null, aiFlag: number): void => sn.ClearRecordFlag(akForm, aiFlag)
	
export const GetConditionList = (akForm: Form | null, aiIndex: number = 0): string[] => sn.GetConditionList(akForm, aiIndex)
	
export const GetDescription = (akForm: Form | null): string => sn.GetDescription(akForm)
	
export const GetFormEditorID = (akForm: Form | null): string => sn.GetFormEditorID(akForm)
	
export const IsFormInMod = (akForm: Form | null, asModName: string): boolean => sn.IsFormInMod(akForm, asModName)
	
export const IsGeneratedForm = (akForm: Form | null): boolean => sn.IsGeneratedForm(akForm)
	
export const IsRecordFlagSet = (akForm: Form | null, aiFlag: number): boolean => sn.IsRecordFlagSet(akForm, aiFlag)
	
export const IsScriptAttachedToForm = (akForm: Form | null, asScriptName: string): boolean => sn.IsScriptAttachedToForm(akForm, asScriptName)
	
export const SetRecordFlag = (akForm: Form | null, aiFlag: number): void => sn.SetRecordFlag(akForm, aiFlag)

/** -------
* SETTERS
* -------
*/
	
export const AddKeywordToForm = (akForm: Form | null, akKeyword: Keyword | null): void => sn.AddKeywordToForm(akForm, akKeyword)
	
export const MarkItemAsFavorite = (akForm: Form | null): void => sn.MarkItemAsFavorite(akForm)
	
export const ReplaceKeywordOnForm = (akForm: Form | null, akKeywordAdd: Keyword | null, akKeywordRemove: Keyword | null): void => sn.ReplaceKeywordOnForm(akForm, akKeywordAdd, akKeywordRemove)
	
export const RemoveKeywordOnForm = (akForm: Form | null, akKeyword: Keyword | null): boolean => sn.RemoveKeywordOnForm(akForm, akKeyword)
	
export const UnmarkItemAsFavorite = (akForm: Form | null): void => sn.UnmarkItemAsFavorite(akForm)

/** ----------------------------------------------------------------------------------------------------------
* FURNITURE
* ----------------------------------------------------------------------------------------------------------
*/
		
export const GetFurnitureType = (akFurniture: Furniture | null): number => sn.GetFurnitureType(akFurniture)

/** ----------------------------------------------------------------------------------------------------------
* GAME
* ----------------------------------------------------------------------------------------------------------
* -------
* GETTERS
* -------
*/
	
export const GetAllEnchantments = (akKeywords: (Keyword | null)[] | null = null): (Enchantment | null)[] => sn.GetAllEnchantments(akKeywords)
	
export const GetAllForms = (aiFormType: number, akKeywords: (Keyword | null)[] | null = null): (Form | null)[] => sn.GetAllForms(aiFormType, akKeywords)
	
export const GetAllRaces = (akKeywords: (Keyword | null)[] | null = null): (Race | null)[] => sn.GetAllRaces(akKeywords)
	
export const GetAllSpells = (akKeywords: (Keyword | null)[] | null = null, abIsPlayable: boolean = false): (Spell | null)[] => sn.GetAllSpells(akKeywords, abIsPlayable)
				
export const GetActorsByProcessingLevel = (aiLevel: number): (Actor | null)[] => sn.GetActorsByProcessingLevel(aiLevel)
	
export const GetAllFormsInMod = (asModName: string, aiFormType: number, akKeywords: (Keyword | null)[] | null = null): (Form | null)[] => sn.GetAllFormsInMod(asModName, aiFormType, akKeywords)
	
export const GetAllEnchantmentsInMod = (asModName: string, akKeywords: (Keyword | null)[] | null = null): (Enchantment | null)[] => sn.GetAllEnchantmentsInMod(asModName, akKeywords)
	
export const GetAllRacesInMod = (asModName: string, akKeywords: (Keyword | null)[] | null = null): (Race | null)[] => sn.GetAllRacesInMod(asModName, akKeywords)
	
export const GetAllSpellsInMod = (asModName: string, akKeywords: (Keyword | null)[] | null = null, abIsPlayable: boolean = false): (Spell | null)[] => sn.GetAllSpellsInMod(asModName, akKeywords, abIsPlayable)
	
export const GetAttachedCells = (): (Cell | null)[] => sn.GetAttachedCells()
	
export const GetFormFromEditorID = (asEditorID: string): Form | null => sn.GetFormFromEditorID(asEditorID)
	
export const GetGameSettingBool = (asGameSetting: string): number => sn.GetGameSettingBool(asGameSetting)
	
export const GetGodMode = (): boolean => sn.GetGodMode()
	
export const GetLocalGravity = (): number[] => sn.GetLocalGravity()
	
export const GetNumActorsInHigh = (): number => sn.GetNumActorsInHigh()
	
export const GetPlayerFollowers = (): (Actor | null)[] => sn.GetPlayerFollowers()
	
export const GetSurfaceMaterialType = (afX: number, afY: number, afZ: number): string => sn.GetSurfaceMaterialType(afX, afY, afZ)
	
export const IsPluginFound = (akName: string): boolean => sn.IsPluginFound(akName)
	
export const IsSurvivalModeActive = (): boolean => sn.IsSurvivalModeActive()

/** -------
* SETTERS
* -------
*/
	
export const ClearCachedFactionFightReactions = (): void => sn.ClearCachedFactionFightReactions()
	
export const SetLocalGravity = (afXAxis: number, afYAxis: number, afZAxis: number): void => sn.SetLocalGravity(afXAxis, afYAxis, afZAxis)

/** ----------------------------------------------------------------------------------------------------------
* HAZARD
* ----------------------------------------------------------------------------------------------------------
*/

export const GetHazardArt = (akHazard: Hazard | null): string => sn.GetHazardArt(akHazard)
	
export const GetHazardIMOD = (akHazard: Hazard | null): ImageSpaceModifier | null => sn.GetHazardIMOD(akHazard)

export const GetHazardIMODRadius = (akHazard: Hazard | null): number => sn.GetHazardIMODRadius(akHazard)
	
export const GetHazardIPDS = (akHazard: Hazard | null): ImpactDataSet | null => sn.GetHazardIPDS(akHazard)
	
export const GetHazardLifetime = (akHazard: Hazard | null): number => sn.GetHazardLifetime(akHazard)
	
export const GetHazardLight = (akHazard: Hazard | null): Light | null => sn.GetHazardLight(akHazard)

export const GetHazardLimit = (akHazard: Hazard | null): number => sn.GetHazardLimit(akHazard)
	
export const GetHazardRadius = (akHazard: Hazard | null): number => sn.GetHazardRadius(akHazard)

export const GetHazardSound = (akHazard: Hazard | null): SoundDescriptor | null => sn.GetHazardSound(akHazard)
	
export const GetHazardSpell = (akHazard: Hazard | null): Spell | null => sn.GetHazardSpell(akHazard)

export const GetHazardTargetInterval = (akHazard: Hazard | null): number => sn.GetHazardTargetInterval(akHazard)

export const IsHazardFlagSet = (akHazard: Hazard | null, aiFlag: number): boolean => sn.IsHazardFlagSet(akHazard, aiFlag)

/** -------
* SETTERS
* -------
*/
	
export const ClearHazardFlag = (akHazard: Hazard | null, aiFlag: number): void => sn.ClearHazardFlag(akHazard, aiFlag)
	
export const SetHazardArt = (akHazard: Hazard | null, asPath: string): void => sn.SetHazardArt(akHazard, asPath)

export const SetHazardFlag = (akHazard: Hazard | null, aiFlag: number): void => sn.SetHazardFlag(akHazard, aiFlag)

export const SetHazardIMOD = (akHazard: Hazard | null, akIMOD: ImageSpaceModifier | null): void => sn.SetHazardIMOD(akHazard, akIMOD)

export const SetHazardIMODRadius = (akHazard: Hazard | null, afRadius: number): void => sn.SetHazardIMODRadius(akHazard, afRadius)
	
export const SetHazardIPDS = (akHazard: Hazard | null, akIPDS: ImpactDataSet | null): void => sn.SetHazardIPDS(akHazard, akIPDS)
	
export const SetHazardLifetime = (akHazard: Hazard | null, afLifetime: number): void => sn.SetHazardLifetime(akHazard, afLifetime)
	
export const SetHazardLight = (akHazard: Hazard | null, akLight: Light | null): void => sn.SetHazardLight(akHazard, akLight)

export const SetHazardLimit = (akHazard: Hazard | null, aiLimit: number): void => sn.SetHazardLimit(akHazard, aiLimit)
	
export const SetHazardRadius = (akHazard: Hazard | null, afRadius: number): void => sn.SetHazardRadius(akHazard, afRadius)

export const SetHazardSound = (akHazard: Hazard | null, akSound: SoundDescriptor | null): void => sn.SetHazardSound(akHazard, akSound)

export const SetHazardSpell = (akHazard: Hazard | null, akspell: Spell | null): void => sn.SetHazardSpell(akHazard, akspell)

export const SetHazardTargetInterval = (akHazard: Hazard | null, afInterval: number): void => sn.SetHazardTargetInterval(akHazard, afInterval)

/** ----------------------------------------------------------------------------------------------------------
* LIGHT
* ----------------------------------------------------------------------------------------------------------
* -------
* GETTERS
* -------
*/

export const GetLightColor = (akLight: Light | null): ColorForm | null => sn.GetLightColor(akLight)
		
export const GetLightFade = (akLight: Light | null): number => sn.GetLightFade(akLight)
	
export const GetLightFOV = (akLight: Light | null): number => sn.GetLightFOV(akLight)
	
export const GetLightRadius = (akLight: Light | null): number => sn.GetLightRadius(akLight)
	
export const GetLightRGB = (akLight: Light | null): number[] => sn.GetLightRGB(akLight)
	
export const GetLightShadowDepthBias = (akLightObject: ObjectReference | null): number => sn.GetLightShadowDepthBias(akLightObject)
	
export const GetLightType = (akLight: Light | null): number => sn.GetLightType(akLight)

/** -------
* SETTERS
* -------
*/
	
export const SetLightColor = (akLight: Light | null, akColorform: ColorForm | null): void => sn.SetLightColor(akLight, akColorform)
		
export const SetLightFade = (akLight: Light | null, afRange: number): void => sn.SetLightFade(akLight, afRange)
		
export const SetLightFOV = (akLight: Light | null, afFOV: number): void => sn.SetLightFOV(akLight, afFOV)
	
export const SetLightRadius = (akLight: Light | null, afRadius: number): void => sn.SetLightRadius(akLight, afRadius)
	
export const SetLightRGB = (akLight: Light | null, aiRGB: number[]): void => sn.SetLightRGB(akLight, aiRGB)
	
export const SetLightShadowDepthBias = (akLightObject: ObjectReference | null, afDepthBias: number): void => sn.SetLightShadowDepthBias(akLightObject, afDepthBias)
	
export const SetLightType = (akLight: Light | null, aiLightType: number): void => sn.SetLightType(akLight, aiLightType)

/** ----------------------------------------------------------------------------------------------------------
* LOCATION
* ----------------------------------------------------------------------------------------------------------
* -------
* GETTERS
* -------
*/

export const GetParentLocation = (akLoc: Location | null): Location | null => sn.GetParentLocation(akLoc)

/** -------
* SETTERS
* -------
*/
	
export const SetParentLocation = (akLoc: Location | null, akNewLoc: Location | null): void => sn.SetParentLocation(akLoc, akNewLoc)

/** ----------------------------------------------------------------------------------------------------------
* MAGIC EFFECTS
* ----------------------------------------------------------------------------------------------------------
* ---------
* GETTERS
* ---------
*/
	
export const GetAssociatedForm = (akMagicEffect: MagicEffect | null): Form | null => sn.GetAssociatedForm(akMagicEffect)
	
export const GetEffectArchetypeAsInt = (akMagicEffect: MagicEffect | null): number => sn.GetEffectArchetypeAsInt(akMagicEffect)
	
export const GetEffectArchetypeAsString = (akMagicEffect: MagicEffect | null): string => sn.GetEffectArchetypeAsString(akMagicEffect)
	
export const GetPrimaryActorValue = (akMagicEffect: MagicEffect | null): string => sn.GetPrimaryActorValue(akMagicEffect)
	
export const GetSecondaryActorValue = (akMagicEffect: MagicEffect | null): string => sn.GetSecondaryActorValue(akMagicEffect)
		
export const GetMagicEffectSound = (akMagicEffect: MagicEffect | null, aiType: number): SoundDescriptor | null => sn.GetMagicEffectSound(akMagicEffect, aiType)

/** -------
* SETTERS
* -------
*/
	
export const SetAssociatedForm = (akMagicEffect: MagicEffect | null, akForm: Form | null): void => sn.SetAssociatedForm(akMagicEffect, akForm)
	
export const SetMagicEffectSound = (akMagicEffect: MagicEffect | null, akSoundDescriptor: SoundDescriptor | null, aiType: number): void => sn.SetMagicEffectSound(akMagicEffect, akSoundDescriptor, aiType)

/** ----------------------------------------------------------------------------------------------------------
* OBJECTREFERENCES
* ----------------------------------------------------------------------------------------------------------
* --------
* GETTERS
* --------
*/
		
export const AddAllItemsToArray = (akRef: ObjectReference | null, abNoEquipped: boolean = true, abNoFavorited: boolean = false, abNoQuestItem: boolean = false): (Form | null)[] => sn.AddAllItemsToArray(akRef, abNoEquipped, abNoFavorited, abNoQuestItem)
	
export const AddAllItemsToList = (akRef: ObjectReference | null, akList: FormList | null, abNoEquipped: boolean = true, abNoFavorited: boolean = false, abNoQuestItem: boolean = false): void => sn.AddAllItemsToList(akRef, akList, abNoEquipped, abNoFavorited, abNoQuestItem)
	
export const AddItemsOfTypeToArray = (akRef: ObjectReference | null, aiFormType: number, abNoEquipped: boolean = true, abNoFavorited: boolean = false, abNoQuestItem: boolean = false): (Form | null)[] => sn.AddItemsOfTypeToArray(akRef, aiFormType, abNoEquipped, abNoFavorited, abNoQuestItem)
	
export const AddItemsOfTypeToList = (akRef: ObjectReference | null, akList: FormList | null, aiFormType: number, abNoEquipped: boolean = true, abNoFavorited: boolean = false, abNoQuestItem: boolean = false): void => sn.AddItemsOfTypeToList(akRef, akList, aiFormType, abNoEquipped, abNoFavorited, abNoQuestItem)
	
export const FindAllReferencesOfFormType = (akRef: ObjectReference | null, formType: number, afRadius: number): (ObjectReference | null)[] => sn.FindAllReferencesOfFormType(akRef, formType, afRadius)
	
export const FindAllReferencesWithKeyword = (akRef: ObjectReference | null, keywordOrList: Form | null, afRadius: number, abMatchAll: boolean): (ObjectReference | null)[] => sn.FindAllReferencesWithKeyword(akRef, keywordOrList, afRadius, abMatchAll)
	
export const FindAllReferencesOfType = (akRef: ObjectReference | null, akFormOrList: Form | null, afRadius: number): (ObjectReference | null)[] => sn.FindAllReferencesOfType(akRef, akFormOrList, afRadius)
	
export const FindFirstItemInList = (akRef: ObjectReference | null, akList: FormList | null): Form | null => sn.FindFirstItemInList(akRef, akList)
	
export const GetActivateChildren = (akRef: ObjectReference | null): (ObjectReference | null)[] => sn.GetActivateChildren(akRef)
	
export const GetActiveGamebryoAnimation = (akRef: ObjectReference | null): string => sn.GetActiveGamebryoAnimation(akRef)
	
export const GetActorCause = (akRef: ObjectReference | null): Actor | null => sn.GetActorCause(akRef)
	
export const GetAllArtObjects = (akRef: ObjectReference | null): (Art | null)[] => sn.GetAllArtObjects(akRef)
	
export const GetAllEffectShaders = (akRef: ObjectReference | null): (EffectShader | null)[] => sn.GetAllEffectShaders(akRef)
		
export const GetClosestActorFromRef = (akRef: ObjectReference | null, abIgnorePlayer: boolean): Actor | null => sn.GetClosestActorFromRef(akRef, abIgnorePlayer)
	
export const GetEffectShaderDuration = (akRef: ObjectReference | null, akShader: EffectShader | null): number => sn.GetEffectShaderDuration(akRef, akShader)
	
export const GetDoorDestination = (akRef: ObjectReference | null): ObjectReference | null => sn.GetDoorDestination(akRef)
	
export const GetLinkedChildren = (akRef: ObjectReference | null, akKeyword: Keyword | null): (ObjectReference | null)[] => sn.GetLinkedChildren(akRef, akKeyword)
	
export const GetMagicEffectSource = (akRef: ObjectReference | null, akEffect: MagicEffect | null): (Form | null)[] => sn.GetMagicEffectSource(akRef, akEffect)
		
export const GetMaterialType = (akRef: ObjectReference | null, asNodeName: string = ""): string[] => sn.GetMaterialType(akRef, asNodeName)
	
export const GetMotionType = (akRef: ObjectReference | null): number => sn.GetMotionType(akRef)
	
export const GetRandomActorFromRef = (akRef: ObjectReference | null, afRadius: number, abIgnorePlayer: boolean): Actor | null => sn.GetRandomActorFromRef(akRef, afRadius, abIgnorePlayer)
	
export const GetQuestItems = (akRef: ObjectReference | null, abNoEquipped: boolean = false, abNoFavorited: boolean = false): (Form | null)[] => sn.GetQuestItems(akRef, abNoEquipped, abNoFavorited)
	
export const GetRefAliases = (akRef: ObjectReference | null): (Alias | null)[] => sn.GetRefAliases(akRef)
		
export const GetStoredSoulSize = (akRef: ObjectReference | null): number => sn.GetStoredSoulSize(akRef)
	
export const HasArtObject = (akRef: ObjectReference | null, akArtObject: Art | null, abActive: boolean = false): number => sn.HasArtObject(akRef, akArtObject, abActive)
	
export const HasEffectShader = (akRef: ObjectReference | null, akShader: EffectShader | null, abActive: boolean = false): number => sn.HasEffectShader(akRef, akShader, abActive)
	
export const HasNiExtraData = (akRef: ObjectReference | null, asName: string): boolean => sn.HasNiExtraData(akRef, asName)
	
export const IsCasting = (akRef: ObjectReference | null, akMagicItem: Form | null): boolean => sn.IsCasting(akRef, akMagicItem)
	
export const IsLoadDoor = (akRef: ObjectReference | null): boolean => sn.IsLoadDoor(akRef)
	
export const IsQuestItem = (akRef: ObjectReference | null): boolean => sn.IsQuestItem(akRef)
	
export const IsVIP = (akRef: ObjectReference | null): boolean => sn.IsVIP(akRef)

/** -------
* SETTERS
* -------
*/
		
export const ApplyMaterialShader = (akRef: ObjectReference | null, akMatObject: MaterialObject | null, directionalThresholdAngle: number): void => sn.ApplyMaterialShader(akRef, akMatObject, directionalThresholdAngle)
	
export const AddKeywordToRef = (akRef: ObjectReference | null, akKeyword: Keyword | null): void => sn.AddKeywordToRef(akRef, akKeyword)
	
export const MoveToNearestNavmeshLocation = (akRef: ObjectReference | null): void => sn.MoveToNearestNavmeshLocation(akRef)
				
export const RemoveAllModItems = (akRef: ObjectReference | null, asModName: string, abOnlyUnequip: boolean = false): void => sn.RemoveAllModItems(akRef, asModName, abOnlyUnequip)
	
export const RemoveKeywordFromRef = (akRef: ObjectReference | null, akKeyword: Keyword | null): boolean => sn.RemoveKeywordFromRef(akRef, akKeyword)
	
export const ReplaceKeywordOnRef = (akRef: ObjectReference | null, akKeywordAdd: Keyword | null, akKeywordRemove: Keyword | null): void => sn.ReplaceKeywordOnRef(akRef, akKeywordAdd, akKeywordRemove)
	
export const PlayDebugShader = (akRef: ObjectReference | null, afRGBA: number[]): void => sn.PlayDebugShader(akRef, afRGBA)
	
export const ScaleObject3D = (akRef: ObjectReference | null, asNodeName: string, afScale: number): void => sn.ScaleObject3D(akRef, asNodeName, afScale)
	
export const SetBaseObject = (akRef: ObjectReference | null, akBaseObject: Form | null): void => sn.SetBaseObject(akRef, akBaseObject)
	
export const SetCollisionLayer = (akRef: ObjectReference | null, asNodeName: string, aiCollisionLayer: number): void => sn.SetCollisionLayer(akRef, asNodeName, aiCollisionLayer)
	
export const SetDoorDestination = (akRef: ObjectReference | null, akDoor: ObjectReference | null): boolean => sn.SetDoorDestination(akRef, akDoor)
	
export const SetEffectShaderDuration = (akRef: ObjectReference | null, akShader: EffectShader | null, afTime: number, abAbsolute: boolean): void => sn.SetEffectShaderDuration(akRef, akShader, afTime, abAbsolute)
		
export const SetLinkedRef = (akRef: ObjectReference | null, akTargetRef: ObjectReference | null, akKeyword: Keyword | null = null): void => sn.SetLinkedRef(akRef, akTargetRef, akKeyword)
	
export const SetMaterialType = (akRef: ObjectReference | null, asNewMaterial: string, asOldMaterial: string = "", asNodeName: string = ""): void => sn.SetMaterialType(akRef, asNewMaterial, asOldMaterial, asNodeName)
	
export const SetupBodyPartGeometry = (akRef: ObjectReference | null, akActor: Actor | null): void => sn.SetupBodyPartGeometry(akRef, akActor)
	
export const SetShaderType = (akRef: ObjectReference | null, akTemplate: ObjectReference | null, asDiffusePath: string, aiShaderType: number, aiTextureType: number, abNoWeapons: boolean, abNoAlphaProperty: boolean): void => sn.SetShaderType(akRef, akTemplate, asDiffusePath, aiShaderType, aiTextureType, abNoWeapons, abNoAlphaProperty)
								
export const StopAllShaders = (akRef: ObjectReference | null): void => sn.StopAllShaders(akRef)
	
export const StopArtObject = (akRef: ObjectReference | null, akArt: Art | null): void => sn.StopArtObject(akRef, akArt)
	
export const ToggleChildNode = (akRef: ObjectReference | null, asNodeName: string, abDisable: boolean): void => sn.ToggleChildNode(akRef, asNodeName, abDisable)
	
export const UpdateHitEffectArtNode = (akRef: ObjectReference | null, akArt: Art | null, asNewNode: string, afTranslate: number[], afRotate: number[], afRelativeScale: number = 1.0): void => sn.UpdateHitEffectArtNode(akRef, akArt, asNewNode, afTranslate, afRotate, afRelativeScale)

/** ----------------------------------------------------------------------------------------------------------
* PACKAGES
* ----------------------------------------------------------------------------------------------------------
* -------
* GETTERS
* -------
*/
	
export const GetPackageType = (akPackage: Package | null): number => sn.GetPackageType(akPackage)
	
export const GetPackageIdles = (akPackage: Package | null): (Idle | null)[] => sn.GetPackageIdles(akPackage)

/** -------
* SETTERS
* -------
*/
	
export const AddPackageIdle = (akPackage: Package | null, akIdle: Idle | null): void => sn.AddPackageIdle(akPackage, akIdle)
	
export const RemovePackageIdle = (akPackage: Package | null, akIdle: Idle | null): void => sn.RemovePackageIdle(akPackage, akIdle)

/** ----------------------------------------------------------------------------------------------------------
* PAPYRUS EXTENDER
* ----------------------------------------------------------------------------------------------------------
* (major,minor,patch / 5,1,0)
*/
export const GetPapyrusExtenderVersion = (): number[] => sn.GetPapyrusExtenderVersion()

/** -----------------------------------------------------------------------------------------------------------
* POTION
* -----------------------------------------------------------------------------------------------------------
*/
	
export const AddMagicEffectToPotion = (akPotion: Potion | null, akMagicEffect: MagicEffect | null, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0, asConditionList: string[]): void => sn.AddMagicEffectToPotion(akPotion, akMagicEffect, afMagnitude, aiArea, aiDuration, afCost, asConditionList)
	
export const AddEffectItemToPotion = (akPotion: Potion | null, akPotionToCopyFrom: Potion | null, aiIndex: number, afCost: number = -1.0): void => sn.AddEffectItemToPotion(akPotion, akPotionToCopyFrom, aiIndex, afCost)
	
export const RemoveMagicEffectFromPotion = (akPotion: Potion | null, akMagicEffect: MagicEffect | null, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0): void => sn.RemoveMagicEffectFromPotion(akPotion, akMagicEffect, afMagnitude, aiArea, aiDuration, afCost)
	
export const RemoveEffectItemFromPotion = (akPotion: Potion | null, akPotionToMatchFrom: Potion | null, aiIndex: number): void => sn.RemoveEffectItemFromPotion(akPotion, akPotionToMatchFrom, aiIndex)

/** ----------------------------------------------------------------------------------------------------------
* PROJECTILES
* ----------------------------------------------------------------------------------------------------------
* --------
* GETTERS
* --------
*/
	
export const GetProjectileGravity = (akProjectile: Projectile | null): number => sn.GetProjectileGravity(akProjectile)
	
export const GetProjectileImpactForce = (akProjectile: Projectile | null): number => sn.GetProjectileImpactForce(akProjectile)
	
export const GetProjectileRange = (akProjectile: Projectile | null): number => sn.GetProjectileRange(akProjectile)
	
export const GetProjectileSpeed = (akProjectile: Projectile | null): number => sn.GetProjectileSpeed(akProjectile)
	
export const GetProjectileType = (akProjectile: Projectile | null): number => sn.GetProjectileType(akProjectile)

/** -------
* SETTERS
* -------
*/
	
export const SetProjectileGravity = (akProjectile: Projectile | null, afGravity: number): void => sn.SetProjectileGravity(akProjectile, afGravity)
	
export const SetProjectileImpactForce = (akProjectile: Projectile | null, afImpactForce: number): void => sn.SetProjectileImpactForce(akProjectile, afImpactForce)
	
export const SetProjectileRange = (akProjectile: Projectile | null, afRange: number): void => sn.SetProjectileRange(akProjectile, afRange)
	
export const SetProjectileSpeed = (akProjectile: Projectile | null, afSpeed: number): void => sn.SetProjectileSpeed(akProjectile, afSpeed)

/** -----------------------------------------------------------------------------------------------------------
* QUEST
* -----------------------------------------------------------------------------------------------------------
*/

export const GetAllQuestObjectives = (akQuest: Quest | null): number[] => sn.GetAllQuestObjectives(akQuest)

/** -----------------------------------------------------------------------------------------------------------
* SCROLL
* -----------------------------------------------------------------------------------------------------------
*/
	
export const AddMagicEffectToScroll = (akScroll: Scroll | null, akMagicEffect: MagicEffect | null, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0, asConditionList: string[]): void => sn.AddMagicEffectToScroll(akScroll, akMagicEffect, afMagnitude, aiArea, aiDuration, afCost, asConditionList)
	
export const AddEffectItemToScroll = (akScroll: Scroll | null, akScrollToCopyFrom: Scroll | null, aiIndex: number, afCost: number = -1.0): void => sn.AddEffectItemToScroll(akScroll, akScrollToCopyFrom, aiIndex, afCost)
	
export const RemoveMagicEffectFromScroll = (akScroll: Scroll | null, akMagicEffect: MagicEffect | null, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0): void => sn.RemoveMagicEffectFromScroll(akScroll, akMagicEffect, afMagnitude, aiArea, aiDuration, afCost)
	
export const RemoveEffectItemFromScroll = (akScroll: Scroll | null, akScrollToMatchFrom: Scroll | null, aiIndex: number): void => sn.RemoveEffectItemFromScroll(akScroll, akScrollToMatchFrom, aiIndex)

/** -----------------------------------------------------------------------------------------------------------
* SOUND
* -----------------------------------------------------------------------------------------------------------
*/

export const SetSoundDescriptor = (akSound: Sound | null, akSoundDescriptor: SoundDescriptor | null): void => sn.SetSoundDescriptor(akSound, akSoundDescriptor)

/** -----------------------------------------------------------------------------------------------------------
* SPELL
* -----------------------------------------------------------------------------------------------------------
* --------
* GETTERS
* --------
*/
	
export const GetSpellType = (akSpell: Spell | null): number => sn.GetSpellType(akSpell)

/** --------
* SETTERS
* --------
*/
	
export const AddMagicEffectToSpell = (akSpell: Spell | null, akMagicEffect: MagicEffect | null, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0, asConditionList: string[]): void => sn.AddMagicEffectToSpell(akSpell, akMagicEffect, afMagnitude, aiArea, aiDuration, afCost, asConditionList)
	
export const AddEffectItemToSpell = (akSpell: Spell | null, akSpellToCopyFrom: Spell | null, aiIndex: number, afCost: number = -1.0): void => sn.AddEffectItemToSpell(akSpell, akSpellToCopyFrom, aiIndex, afCost)
	
export const RemoveMagicEffectFromSpell = (akSpell: Spell | null, akMagicEffect: MagicEffect | null, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0): void => sn.RemoveMagicEffectFromSpell(akSpell, akMagicEffect, afMagnitude, aiArea, aiDuration, afCost)
	
export const RemoveEffectItemFromSpell = (akSpell: Spell | null, akSpellToMatchFrom: Spell | null, aiIndex: number): void => sn.RemoveEffectItemFromSpell(akSpell, akSpellToMatchFrom, aiIndex)
	
export const SetSpellCastingType = (akSpell: Spell | null, aiType: number): void => sn.SetSpellCastingType(akSpell, aiType)
	
export const SetSpellDeliveryType = (akSpell: Spell | null, aiType: number): void => sn.SetSpellDeliveryType(akSpell, aiType)

/** ----------------------------------------------------------------------------------------------------------
* STRINGS
* ----------------------------------------------------------------------------------------------------------
*/

export const IntToString = (aiValue: number, abHex: boolean): string => sn.IntToString(aiValue, abHex)
	
export const StringToInt = (asString: string): number => sn.StringToInt(asString)

/** ----------------------------------------------------------------------------------------------------------
* UI
* ----------------------------------------------------------------------------------------------------------
*/
	
export const GetMenuContainer = (): ObjectReference | null => sn.GetMenuContainer()

/** ----------------------------------------------------------------------------------------------------------
* UTILITY
* ----------------------------------------------------------------------------------------------------------
*/
	
export const GenerateRandomFloat = (afMin: number, afMax: number): number => sn.GenerateRandomFloat(afMin, afMax)
	
export const GenerateRandomInt = (afMin: number, afMax: number): number => sn.GenerateRandomInt(afMin, afMax)
	
export const GetSystemTime = (): number[] => sn.GetSystemTime()

/** -----------------------------------------------------------------------------------------------------------
* VISUALEFFECTS
* ----------------------------------------------------------------------------------------------------------
* --------
* GETTERS
* --------
*/
	
export const GetArtObject = (akEffect: VisualEffect | null): Art | null => sn.GetArtObject(akEffect)
	
export const GetArtObjectTotalCount = (akEffect: VisualEffect | null, abActive: boolean): number => sn.GetArtObjectTotalCount(akEffect, abActive)

/** --------
* SETTERS
* --------
*/
	
export const SetArtObject = (akEffect: VisualEffect | null, akArt: Art | null): void => sn.SetArtObject(akEffect, akArt)

/** -----------------------------------------------------------------------------------------------------------
* WEATHER
* ----------------------------------------------------------------------------------------------------------
*/

export const GetWindSpeedAsFloat = (akWeather: Weather | null): number => sn.GetWindSpeedAsFloat(akWeather)
	
export const GetWindSpeedAsInt = (akWeather: Weather | null): number => sn.GetWindSpeedAsInt(akWeather)
	
export const GetWeatherType = (akWeather: Weather | null = null): number => sn.GetWeatherType(akWeather)
