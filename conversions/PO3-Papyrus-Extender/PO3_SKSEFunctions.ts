/*
==============================================
Typescript definitions for v4.5.2
==============================================

This file was automatically generated by Papyrus-2-Typescript.exe
https://github.com/CarlosLeyvaAyala/Papyrus-2-Typescript

The program has no way to know the intention of the humans that made
the scripts, so it's always advisable to manually check all generated
files to make sure everything is declared as it should.

Take note the program assumes this script exists in some subfolder
to the folder where `skyrimPlatform.ts` is found, otherwise you'll get
"Cannot find module..." type of errors.

If you want to have this script in some other place, just change the
relative path of each `import`.
*/

export declare class Debris extends Form {}
export declare class FootstepSet extends Form {}
export declare class LightingTemplate extends Form {}
export declare class MaterialObject extends Form {}

import * as sp from "../skyrimPlatform"
import { Weather } from "../skyrimPlatform"
import { VisualEffect } from "../skyrimPlatform"
import { TextureSet } from "../skyrimPlatform"
import { Spell } from "../skyrimPlatform"
import { SoundDescriptor } from "../skyrimPlatform"
import { Sound } from "../skyrimPlatform"
import { Scroll } from "../skyrimPlatform"
import { Race } from "../skyrimPlatform"
import { Projectile } from "../skyrimPlatform"
import { Potion } from "../skyrimPlatform"
import { Perk } from "../skyrimPlatform"
import { Package } from "../skyrimPlatform"
import { ObjectReference } from "../skyrimPlatform"
import { MagicEffect } from "../skyrimPlatform"
import { Location } from "../skyrimPlatform"
import { Light } from "../skyrimPlatform"
import { LeveledItem } from "../skyrimPlatform"
import { Keyword } from "../skyrimPlatform"
import { Key } from "../skyrimPlatform"
import { ImpactDataSet } from "../skyrimPlatform"
import { ImageSpaceModifier } from "../skyrimPlatform"
import { Idle } from "../skyrimPlatform"
import { Hazard } from "../skyrimPlatform"
import { Furniture } from "../skyrimPlatform"
import { FormList } from "../skyrimPlatform"
import { Form } from "../skyrimPlatform"
import { Enchantment } from "../skyrimPlatform"
import { EffectShader } from "../skyrimPlatform"
import { ColorForm } from "../skyrimPlatform"
import { Cell } from "../skyrimPlatform"
import { Book } from "../skyrimPlatform"
import { Art } from "../skyrimPlatform"
import { ArmorAddon } from "../skyrimPlatform"
import { Armor } from "../skyrimPlatform"
import { Alias } from "../skyrimPlatform"
import { ActorBase } from "../skyrimPlatform"
import { Actor } from "../skyrimPlatform"
import { ActiveMagicEffect } from "../skyrimPlatform"

const sn = (sp as any).PO3_SKSEFunctions

//----------------------------------------------------------------------------------------------------------
//ACTIVE EFFECT
//----------------------------------------------------------------------------------------------------------
	
	//returns whether the activeEffect has script attached. If scriptName is empty, it will return if the activeEffect has any non-base scripts attached
export const IsScriptAttachedToActiveEffect = (akActiveEffect: ActiveMagicEffect | null | undefined, asScriptName: string): boolean => sn.IsScriptAttachedToActiveEffect(akActiveEffect,  asScriptName)

//----------------------------------------------------------------------------------------------------------	
//ACTORS 
//----------------------------------------------------------------------------------------------------------

	//-------
	//GETTERS
	//-------
	 
	//Gets all magiceffects currently on the actor. Filters out inactive and hideinui spells.
export const GetActiveEffects = (akActor: Actor | null | undefined, abShowInactive: boolean = false): MagicEffect[] => sn.GetActiveEffects(akActor,  abShowInactive)
	
export const GetActorAlpha = (akActor: Actor | null | undefined): number => sn.GetActorAlpha(akActor)
	
export const GetActorRefraction = (akActor: Actor | null | undefined): number => sn.GetActorRefraction(akActor)
	
/** ACTOR STATE
		Alive = 0
		Dying = 1
		Dead = 2
		Unconscious = 3
		Reanimate = 4
		Recycle = 5
		Restrained = 6
		EssentialDown = 7
		Bleedout = 8 */
	
	//Gets actor state 
export const GetActorState = (akActor: Actor | null | undefined): number => sn.GetActorState(akActor)
	
	//Gets actor soul size
export const GetActorSoulSize = (akActor: Actor | null | undefined): number => sn.GetActorSoulSize(akActor)
	
	//Gets actor value modifier. 0 - permanent, 1 - temporary, 2 - damage
export const GetActorValueModifier = (akActor: Actor | null | undefined, aiModifier: number, asActorValue: string): number => sn.GetActorValueModifier(akActor,  aiModifier,  asActorValue)
	
	//Gets actor critical stage
export const GetCriticalStage = (akActor: Actor | null | undefined): number => sn.GetCriticalStage(akActor)
		
	//Gets all allies of the actor, if in combat
export const GetCombatAllies = (akActor: Actor | null | undefined): Actor[] => sn.GetCombatAllies(akActor)
	
	//Gets all targets of the actor, if in combat
export const GetCombatTargets = (akActor: Actor | null | undefined): Actor[] => sn.GetCombatTargets(akActor)
	
	//Gets all current summons commanded by this actor
export const GetCommandedActors = (akActor: Actor | null | undefined): Actor[] => sn.GetCommandedActors(akActor)
	
	//Gets the owner of summoned actor
export const GetCommandingActor = (akActor: Actor | null | undefined): Actor | null | undefined => sn.GetCommandingActor(akActor)
	
	//Gets current hair color on actor. Fails if hair headpart doesn't exist
export const GetHairColor = (akActor: Actor | null | undefined): ColorForm | null | undefined => sn.GetHairColor(akActor)
	
	//Gets textureset belonging to headpart, if any. 
export const GetHeadPartTextureSet = (akActor: Actor | null | undefined, aiType: number): TextureSet | null | undefined => sn.GetHeadPartTextureSet(akActor,  aiType)
	
	//Gets the actor's local gravity.
export const GetLocalGravityActor = (akActor: Actor | null | undefined): number => sn.GetLocalGravityActor(akActor)
	
	//Gets object under actor's feet (eg. table). Does not work if the player is standing on the ground.
export const GetObjectUnderFeet = (akActor: Actor | null | undefined): ObjectReference | null | undefined => sn.GetObjectUnderFeet(akActor)
	
	//Gets actual current package on actor, including internal packages used by the game (see GetPackageType below)
export const GetRunningPackage = (akActor: Actor | null | undefined): Package | null | undefined => sn.GetRunningPackage(akActor)
	
	//Gets current skin color on actor. 
export const GetSkinColor = (akActor: Actor | null | undefined): ColorForm | null | undefined => sn.GetSkinColor(akActor)
		
	//Similar to GetTimeDead console command. Returns 0.0 if actor is alive
export const GetTimeDead = (akActor: Actor | null | undefined): number => sn.GetTimeDead(akActor)
	
	//Returns time of death in game days passed
export const GetTimeOfDeath = (akActor: Actor | null | undefined): number => sn.GetTimeOfDeath(akActor)
	
	//HasSpell but checks if the spell is present on the actor (i.e active and not dispelled)
export const HasActiveSpell = (akActor: Actor | null | undefined, akSpell: Spell | null | undefined): boolean => sn.HasActiveSpell(akActor,  akSpell)
		
	//Returns whether the actor is in deferred kill mode
export const HasDeferredKill = (akActor: Actor | null | undefined): boolean => sn.HasDeferredKill(akActor)
	
	//Checks if activemagiceffect with given archetype is present on actor. Archetype MUST be typed as given below.
export const HasMagicEffectWithArchetype = (akActor: Actor | null | undefined, asArchetype: string): boolean => sn.HasMagicEffectWithArchetype(akActor,  asArchetype)
	
	//Returns if the actor has skin/armor with skin present
export const HasSkin = (akActor: Actor | null | undefined, akArmorToCheck: Armor | null | undefined): boolean => sn.HasSkin(akActor,  akArmorToCheck)
	
	//Returns whether the actor is in cell water or lava
export const IsActorInWater = (akActor: Actor | null | undefined): boolean => sn.IsActorInWater(akActor)
	
	//Returns whether the actor is underwater
export const IsActorUnderwater = (akActor: Actor | null | undefined): boolean => sn.IsActorUnderwater(akActor)
	
/** LIMB
		None = -1
		Torso = 0
		Head = 1
		... */
	
	//Returns whether limb is gone (i.e, the head, but adding the whole enum in case someone expands the dismemberment system in the future)
export const IsLimbGone = (akActor: Actor | null | undefined, aiLimb: number): boolean => sn.IsLimbGone(akActor,  aiLimb)
	
	//Returns whether the actor is a quadruped
export const IsQuadruped = (akActor: Actor | null | undefined): boolean => sn.IsQuadruped(akActor)
		
	//Returns whether target is soul trapped / capable of being soul trapped successfully (if using mods that bypass vanilla soul trap system).
export const IsSoulTrapped = (akActor: Actor | null | undefined): boolean => sn.IsSoulTrapped(akActor)
		
	//-------
	//SETTERS
	//-------
	
	//Adds all equipped items to array
export const AddAllEquippedItemsToArray = (akActor: Actor | null | undefined): Form[] => sn.AddAllEquippedItemsToArray(akActor)
	
	//Adds perks to the actorbase, works on leveled actors/unique NPCs. Function serializes data to skse cosave, so perks are applied correctly on loading/reloading saves.
export const AddBasePerk = (akActor: Actor | null | undefined, akPerk: Perk | null | undefined): boolean => sn.AddBasePerk(akActor,  akPerk)
	
	//Adds spells to actorbase, works on player/leveled actors/unique NPCs. Function serializes data to skse cosave, so spells are applied correctly on loading/reloading saves.
export const AddBaseSpell = (akActor: Actor | null | undefined, akSpell: Spell | null | undefined): boolean => sn.AddBaseSpell(akActor,  akSpell)
	
/** BLEND MODES
		Darken = 0
		Multiply = 1
		ColorBurn = 2
		LinearBurn = 3
		DarkerColor = 4
		Lighten = 5
		Screen = 6
		ColorDodge = 7
		LinearDodge = 8
		LighterColor = 9	
		Overlay = 10
		SoftLight = 11
		HardLight = 12
		VividLight = 13
		LinearLight = 14
		PinLight = 15
		HardMix = 16	
		Difference = 17
		Exclusion = 18
		Subtract = 19
		Divide = 20 */
	
	//Blends existing skin color with specified color, using photoshop blend formulas, with alpha (opacity).
	//If true, autoLuminance calculates skin tone relative luminance. The opacity value is then used as a multiplier on top of that, final value is clamped to 0-1
	//If false, only opacity will be used. Recommend to use autoluminance because colors will not blend well for all skin tones using flat values. 
export const BlendColorWithSkinTone = (akActor: Actor | null | undefined, akColor: ColorForm | null | undefined, aiBlendMode: number, abAutoLuminance: boolean, afOpacity: number): void => sn.BlendColorWithSkinTone(akActor,  akColor,  aiBlendMode,  abAutoLuminance,  afOpacity)
		
	//Decapitates living and dead actors. Living actors will not die when this is called!
export const DecapitateActor = (akActor: Actor | null | undefined): void => sn.DecapitateActor(akActor)

	//0 - EnableAI + toggling record hits flags so they don't go flying 300 feet when unfrozen.
	//1 - Paralyzes actor, even when dead.
export const FreezeActor = (akActor: Actor | null | undefined, type: number, abFreeze: boolean): void => sn.FreezeActor(akActor,  type,  abFreeze)
		
	//Quick and dirty hack to instantly kill the actor and set as dead.
export const KillNoWait = (akActor: Actor | null | undefined): void => sn.KillNoWait(akActor)
	
	//DEPRECIATED
	//Blends existing skin color with specified color. 
	//True - intensity is manually calculated using percentage 0-1.0, False - automatically calculated using skin tone luminance 
export const MixColorWithSkinTone = (akActor: Actor | null | undefined, akColor: ColorForm | null | undefined, abManualMode: boolean, afPercentage: number): void => sn.MixColorWithSkinTone(akActor,  akColor,  abManualMode,  afPercentage)
		
	//Batch added spell removal, filtered by optional mod name, and keyword array (matching any keyword or all of them)
export const RemoveAddedSpells = (akActor: Actor | null | undefined, modName: string, keywords: Keyword[], abMatchAll: boolean): void => sn.RemoveAddedSpells(akActor,  modName,  keywords,  abMatchAll)
	
	//Removes perks from the actorbase
	//Perk effects may not be removed from unique actors, more testing required.
	//Function serializes data to skse cosave, so perks are applied correctly on loading/reloading saves.
export const RemoveBasePerk = (akActor: Actor | null | undefined, akPerk: Perk | null | undefined): boolean => sn.RemoveBasePerk(akActor,  akPerk)
	
	//Removes spells from the actorbase, works on player/leveled actors/unique NPCs. Function serializes data to skse cosave, so spells are applied correctly on loading/reloading saves.
export const RemoveBaseSpell = (akActor: Actor | null | undefined, akSpell: Spell | null | undefined): boolean => sn.RemoveBaseSpell(akActor,  akSpell)
		
	//Replaces specified source textureset on worn armor with target textureset. Lasts for one single gaming session.
	//If texture type is -1, the entire textureset is replaced, otherwise the texture map specified at [textureType] index is replaced (diffuse is 0, normal is 1...)
export const ReplaceArmorTextureSet = (akActor: Actor | null | undefined, akArmor: Armor | null | undefined, akSourceTXST: TextureSet | null | undefined, akTargetTXST: TextureSet | null | undefined, aiTextureType: number = -1): void => sn.ReplaceArmorTextureSet(akActor,  akArmor,  akSourceTXST,  akTargetTXST,  aiTextureType)
	
	//Replaces face textureset. Lasts one gaming session. Can be applied to non-unique actors.
	//If texture type is -1, the entire textureset is replaced, otherwise the texture map specified at [textureType] index is replaced. Replacing the entire textureset may cause a visible neckseam.
export const ReplaceFaceTextureSet = (akActor: Actor | null | undefined, akMaleTXST: TextureSet | null | undefined, akFemaleTXST: TextureSet | null | undefined, aiTextureType: number = -1): void => sn.ReplaceFaceTextureSet(akActor,  akMaleTXST,  akFemaleTXST,  aiTextureType)
	
	//Replaces skin textureset for given slotmask (ie. body/hand). Lasts one gaming session. Has to be reapplied when re-equipping armor.
	//If texture type is -1, the entire textureset is replaced, otherwise the texture map specified at [textureType] index is replaced.
export const ReplaceSkinTextureSet = (akActor: Actor | null | undefined, akMaleTXST: TextureSet | null | undefined, akFemaleTXST: TextureSet | null | undefined, aiSlotMask: number, aiTextureType: number = -1): void => sn.ReplaceSkinTextureSet(akActor,  akMaleTXST,  akFemaleTXST,  aiSlotMask,  aiTextureType)
	
	//Checks for NiExtraData nodes on actor - PO3_TINT/PO3_ALPHA/PO3_TXST/PO3_TOGGLE/PO3_SHADER
	//Stops all effect shaders and
	//PO3_TINT - resets tint, rebuilds facegen if actor is player
	//PO3_ALPHA - resets skin alpha
	//PO3_TXST - resets texturesets with texturepaths containing folderName
	//PO3_TOGGLE - unhides all children of nodes that were written to the extraData
	//PO3_SHADER - recreates the original shader type (as close as possible, projectedUV params are not restored)
export const ResetActor3D = (akActor: Actor | null | undefined, asFolderName: string): boolean => sn.ResetActor3D(akActor,  asFolderName)
	
	//0.0 disables refraction, 1.0 is max refraction
export const SetActorRefraction = (akActor: Actor | null | undefined, afRefraction: number): void => sn.SetActorRefraction(akActor,  afRefraction)
	
	//Sets hair color on actor. Changes may persist throughout gaming session, even when reloading previous saves.
export const SetHairColor = (akActor: Actor | null | undefined, akColor: ColorForm | null | undefined): void => sn.SetHairColor(akActor,  akColor)
	
	//Sets headpart's mesh alpha. Doesn't work for some hair types and heterochromic eyes
export const SetHeadPartAlpha = (akActor: Actor | null | undefined, aiPartType: number, afAlpha: number): void => sn.SetHeadPartAlpha(akActor,  aiPartType,  afAlpha)
	
	//Sets textureset belonging to headpart, if any. 
export const SetHeadPartTextureSet = (akActor: Actor | null | undefined, headpartTXST: TextureSet | null | undefined, aiType: number): void => sn.SetHeadPartTextureSet(akActor,  headpartTXST,  aiType)
	
	//Sets velocity of the actor. May not take place immediately.
export const SetLinearVelocity = (akActor: Actor | null | undefined, afX: number, afY: number, afZ: number): void => sn.SetLinearVelocity(akActor,  afX,  afY,  afZ)
	
	//Sets local gravity of the actor. Negative values will cause them to fly. May not take place immediately.
export const SetLocalGravityActor = (akActor: Actor | null | undefined, afValue: number, abDisableGravityOnGround: boolean): void => sn.SetLocalGravityActor(akActor,  afValue,  abDisableGravityOnGround)
	
	//Sets alpha on face, base skin form and armor meshes with visible skin. Has to be re-applied when armor is un/re-equipped.
export const SetSkinAlpha = (akActor: Actor | null | undefined, afAlpha: number): void => sn.SetSkinAlpha(akActor,  afAlpha)
	
	//Sets skin color (face and body). Has to be re-applied when armor is un/re-equipped.
export const SetSkinColor = (akActor: Actor | null | undefined, akColor: ColorForm | null | undefined): void => sn.SetSkinColor(akActor,  akColor)
	
	//Sets the flag used by the game to determine soul trapped NPCs
export const SetSoulTrapped = (akActor: Actor | null | undefined, abTrapped: boolean): void => sn.SetSoulTrapped(akActor,  abTrapped)
	
	//Toggles any hair wigs (geometry with hair shader) found on slots Hair/LongHair
export const ToggleHairWigs = (akActor: Actor | null | undefined, abDisable: boolean): void => sn.ToggleHairWigs(akActor,  abDisable)
	
/** ARMOR TYPE
		Light = 0
		Heavy = 1
		Clothing = 2 */
	
	//Unequips all armor of type, optionally skipping biped slots.
export const UnequipAllOfType = (akActor: Actor | null | undefined, afArmorType: number, aiSlotsToSkip: number[]): void => sn.UnequipAllOfType(akActor,  afArmorType,  aiSlotsToSkip)
			
//----------------------------------------------------------------------------------------------------------
//ACTORBASE
//----------------------------------------------------------------------------------------------------------

	//-------
	//GETTERS
	//-------
	
	//Gets npc death item
export const GetDeathItem = (akBase: ActorBase | null | undefined): LeveledItem | null | undefined => sn.GetDeathItem(akBase)
	
	//Get actorbase perk at nth index
export const GetNthPerk = (akBase: ActorBase | null | undefined, aiIndex: number): Perk | null | undefined => sn.GetNthPerk(akBase,  aiIndex)
	
	//Get total actorbase perk count
export const GetPerkCount = (akBase: ActorBase | null | undefined): number => sn.GetPerkCount(akBase)
	
	//-------
	//SETTERS
	//-------
	
	//Sets npc death item. Can be None.
export const SetDeathItem = (akBase: ActorBase | null | undefined, akLeveledItem: LeveledItem | null | undefined): void => sn.SetDeathItem(akBase,  akLeveledItem)
	
//----------------------------------------------------------------------------------------------------------
//ALIAS
//----------------------------------------------------------------------------------------------------------
	
	//returns whether the form has script attached. If scriptName is empty, it will return if the alias has any non-base scripts attached
export const IsScriptAttachedToAlias = (akAlias: Alias | null | undefined, asScriptName: string): boolean => sn.IsScriptAttachedToAlias(akAlias,  asScriptName)
	
//----------------------------------------------------------------------------------------------------------
//ARMOR/ADDONS
//----------------------------------------------------------------------------------------------------------
	
	//Gets armor addon's footstep set 
export const GetFootstepSet = (akArma: ArmorAddon | null | undefined): FootstepSet => sn.GetFootstepSet(akArma)
	
	//Sets armor addon's footstep set 
export const SetFootstepSet = (akArma: ArmorAddon | null | undefined, akFootstepSet: FootstepSet): void => sn.SetFootstepSet(akArma,  akFootstepSet)
	
//----------------------------------------------------------------------------------------------------------	
//ARRAYS
//----------------------------------------------------------------------------------------------------------
	
	//Adds actor to array. Modifies array directly, it must be initialized!
export const AddActorToArray = (akActor: Actor | null | undefined, actorArray: Actor[]): boolean => sn.AddActorToArray(akActor,  actorArray)

	//Adds string to array. Modifies array directly, it must be initialized!
export const AddStringToArray = (asString: string, asStrings: string[]): boolean => sn.AddStringToArray(asString,  asStrings)

	//Counts how many instances of a string are in an array.
export const ArrayStringCount = (asString: string, asStrings: string[]): number => sn.ArrayStringCount(asString,  asStrings)

	//Alphabetically sorts and returns truncated sring array.
export const SortArrayString = (asStrings: string[]): string[] => sn.SortArrayString(asStrings)
	
	//Gets name array of all the actors in the area, sorted alphabetically. Generic actors are merged (ie. 3 Whiterun Guard(s)). Filter keyword optional
export const GetSortedActorNames = (akKeyword: Keyword | null | undefined, asPlural: string = "(s)", abInvertKeyword: boolean): string[] => sn.GetSortedActorNames(akKeyword,  asPlural,  abInvertKeyword)
	
	//Gets name array of NPCs, sorted alphabetically. Generic actors are merged (ie. 3 Whiterun Guard(s)).
export const GetSortedNPCNames = (aiActorBases: ActorBase[], asPlural: string = "(s)"): string[] => sn.GetSortedNPCNames(aiActorBases,  asPlural)
	
//----------------------------------------------------------------------------------------------------------	
//BOOK
//----------------------------------------------------------------------------------------------------------
	
	//Clears read flag (and writes it to the save).
export const ClearReadFlag = (akBook: Book | null | undefined): void => sn.ClearReadFlag(akBook)
	
	//Sets read flag (and writes it to the save).
export const SetReadFlag = (akBook: Book | null | undefined): void => sn.SetReadFlag(akBook)
	
//----------------------------------------------------------------------------------------------------------	
//CELL
//----------------------------------------------------------------------------------------------------------
	
	//Gets cell north rotation/worldspace north rotation for exterior cells. Rotation is in degrees.
export const GetCellNorthRotation = (akCell: Cell | null | undefined): number => sn.GetCellNorthRotation(akCell)
	
	//Gets cell lighting template
export const GetLightingTemplate = (akCell: Cell | null | undefined): LightingTemplate => sn.GetLightingTemplate(akCell)
	
	//Sets cell lighting template
export const SetLightingTemplate = (akCell: Cell | null | undefined, akLightingTemplate: LightingTemplate): void => sn.SetLightingTemplate(akCell,  akLightingTemplate)
	
	//Sets cell north rotation.
export const SetCellNorthRotation = (akCell: Cell | null | undefined, afAngle: number): void => sn.SetCellNorthRotation(akCell,  afAngle)
	
//----------------------------------------------------------------------------------------------------------	
//DEBUG
//----------------------------------------------------------------------------------------------------------
	
	//Adds all functional spells (ie. spells that can be learned from spell books, and not all 2000+ spells like psb)
export const GivePlayerSpellBook = (): void => sn.GivePlayerSpellBook()
	
	//Dumps current animation variables to po3_papyrusextender64.log
export const DumpAnimationVariables = (akActor: Actor | null | undefined, asAnimationVarPrefix: string): void => sn.DumpAnimationVariables(akActor,  asAnimationVarPrefix)

//----------------------------------------------------------------------------------------------------------	
//DETECTION
//----------------------------------------------------------------------------------------------------------
	
	//Returns whether other NPCs can detect this actor. 
	//0 -  can't be detected, 1 - normal, 2 -  will always be detected
export const CanActorBeDetected = (akActor: Actor | null | undefined): number => sn.CanActorBeDetected(akActor)

	//Returns whether this actor can detect other NPCs. 
	//0 - can never detect, 1- normal, 2 - will always detect others
export const CanActorDetect = (akActor: Actor | null | undefined): number => sn.CanActorDetect(akActor)

	//Force this actor to be detected by other NPCs (actor is always visible).
export const ForceActorDetection = (akActor: Actor | null | undefined): void => sn.ForceActorDetection(akActor)

	//Force this actor to always detect their targets
export const ForceActorDetecting = (akActor: Actor | null | undefined): void => sn.ForceActorDetecting(akActor)
	
	//Prevent this actor from being detected by other NPCs (actor is hidden).
export const PreventActorDetection = (akActor: Actor | null | undefined): void => sn.PreventActorDetection(akActor)

	//Prevent this actor from detecting other NPCs (actor is blind)
export const PreventActorDetecting = (akActor: Actor | null | undefined): void => sn.PreventActorDetecting(akActor)

	//Resets detection state
export const ResetActorDetection = (akActor: Actor | null | undefined): void => sn.ResetActorDetection(akActor)

	//Resets detecting state
export const ResetActorDetecting = (akActor: Actor | null | undefined): void => sn.ResetActorDetecting(akActor)
		
//----------------------------------------------------------------------------------------------------------	
//EFFECTSHADER
//----------------------------------------------------------------------------------------------------------

	//-------
	//GETTERS
	//-------
	
export const kEffectShader_NoMembraneShader = 0x00000001
export const kEffectShader_MembraneGreyscaleColor = 0x00000002
export const kEffectShader_MembraneGreyscaleAlpha = 0x00000004
export const kEffectShader_NoParticleShader = 0x00000008
export const kEffectShader_EdgeEffectInverse = 0x00000010
export const kEffectShader_AffectSkinOnly = 0x00000020
export const kEffectShader_IgnoreAlpha = 0x00000040
export const kEffectShader_ProjectUV = 0x00000080
export const kEffectShader_IgnoreBaseGeometryAlpha = 0x00000100
export const kEffectShader_Lighting = 0x00000200
export const kEffectShader_NoWeapons = 0x00000400
export const kEffectShader_ParticleAnimated = 0x00008000
export const kEffectShader_ParticleGreyscaleColor = 0x00010000
export const kEffectShader_ParticleGreyscaleAlpha = 0x00020000
export const kEffectShader_UseBloodGeometry = 0x01000000
	
	//Gets addon models
export const GetAddonModels = (akEffectShader: EffectShader | null | undefined): Debris => sn.GetAddonModels(akEffectShader)
	
	//Returns the total number of effect shaders present/present and active (on objects) within the loaded area. 
export const GetEffectShaderTotalCount = (akEffectShader: EffectShader | null | undefined, abActive: boolean): number => sn.GetEffectShaderTotalCount(akEffectShader,  abActive)
	
	//Is effect shader flag set?
export const IsEffectShaderFlagSet = (akEffectShader: EffectShader | null | undefined, aiFlag: number): boolean => sn.IsEffectShaderFlagSet(akEffectShader,  aiFlag)
	
	//Get fill texture
export const GetMembraneFillTexture = (akEffectShader: EffectShader | null | undefined): string => sn.GetMembraneFillTexture(akEffectShader)
	
	//Get holes texture
export const GetMembraneHolesTexture = (akEffectShader: EffectShader | null | undefined): string => sn.GetMembraneHolesTexture(akEffectShader)
	
	//Get membrane palette texture
export const GetMembranePaletteTexture = (akEffectShader: EffectShader | null | undefined): string => sn.GetMembranePaletteTexture(akEffectShader)
	
	//Gets full particle count.
export const GetParticleFullCount = (akEffectShader: EffectShader | null | undefined): number => sn.GetParticleFullCount(akEffectShader)
	
	//Get particle palette texture
export const GetParticlePaletteTexture = (akEffectShader: EffectShader | null | undefined): string => sn.GetParticlePaletteTexture(akEffectShader)
	
	//Get particle shader texture
export const GetParticleShaderTexture = (akEffectShader: EffectShader | null | undefined): string => sn.GetParticleShaderTexture(akEffectShader)
	
	//Gets persistent count.
export const GetParticlePersistentCount = (akEffectShader: EffectShader | null | undefined): number => sn.GetParticlePersistentCount(akEffectShader)
	
	//-------
	//SETTERS
	//-------
	
	//Clears effect shader flag.
export const ClearEffectShaderFlag = (akEffectShader: EffectShader | null | undefined, aiFlag: number): void => sn.ClearEffectShaderFlag(akEffectShader,  aiFlag)
	
	//Gets addon models
export const SetAddonModels = (akEffectShader: EffectShader | null | undefined, akDebris: Debris): void => sn.SetAddonModels(akEffectShader,  akDebris)
	
	//Set effect shader flag.
export const SetEffectShaderFlag = (akEffectShader: EffectShader | null | undefined, aiFlag: number): void => sn.SetEffectShaderFlag(akEffectShader,  aiFlag)
	
	//Set membrane color key
export const SetMembraneColorKeyData = (akEffectShader: EffectShader | null | undefined, aiColorKey: number, aiRGB: number[], afAlpha: number, afTime: number): void => sn.SetMembraneColorKeyData(akEffectShader,  aiColorKey,  aiRGB,  afAlpha,  afTime)
	
	//Set membrane fill texture
export const SetMembraneFillTexture = (akEffectShader: EffectShader | null | undefined, asTextureName: string): void => sn.SetMembraneFillTexture(akEffectShader,  asTextureName)
	
	//Set membrane holes texture
export const SetMembraneHolesTexture = (akEffectShader: EffectShader | null | undefined, asTextureName: string): void => sn.SetMembraneHolesTexture(akEffectShader,  asTextureName)
	
	//Set membrane palette texture
export const SetMembranePaletteTexture = (akEffectShader: EffectShader | null | undefined, asTextureName: string): void => sn.SetMembranePaletteTexture(akEffectShader,  asTextureName)
	
	//Set particle color key
export const SetParticleColorKeyData = (akEffectShader: EffectShader | null | undefined, aiColorKey: number, aiRGB: number[], afAlpha: number, afTime: number): void => sn.SetParticleColorKeyData(akEffectShader,  aiColorKey,  aiRGB,  afAlpha,  afTime)
	
	//Sets full particle count.
export const SetParticleFullCount = (akEffectShader: EffectShader | null | undefined, afParticleCount: number): void => sn.SetParticleFullCount(akEffectShader,  afParticleCount)
	
	//Set particle shader texture
export const SetParticlePaletteTexture = (akEffectShader: EffectShader | null | undefined, asTextureName: string): void => sn.SetParticlePaletteTexture(akEffectShader,  asTextureName)
	
	//Sets persistent particle count.
export const SetParticlePersistentCount = (akEffectShader: EffectShader | null | undefined, afParticleCount: number): void => sn.SetParticlePersistentCount(akEffectShader,  afParticleCount)
	
	//Set particle shader texture
export const SetParticleShaderTexture = (akEffectShader: EffectShader | null | undefined, asTextureName: string): void => sn.SetParticleShaderTexture(akEffectShader,  asTextureName)
	
//-----------------------------------------------------------------------------------------------------------	
//ENCHANTMENT - see SPELL
//-----------------------------------------------------------------------------------------------------------	
	//--------
	//GETTERS
	//--------
	
/** ENCHANTMENT TYPES
		Enchantment = 6,
		StaffEnchantment = 12 */
	
	//Returns enchantment type. -1 if  is None
export const GetEnchantmentType = (akEnchantment: Enchantment | null | undefined): number => sn.GetEnchantmentType(akEnchantment)
		
	//--------
	//SETTERS
	//--------
	
export const AddMagicEffectToEnchantment = (akEnchantment: Enchantment | null | undefined, akMagicEffect: MagicEffect | null | undefined, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0, asConditionList: string[]): void => sn.AddMagicEffectToEnchantment(akEnchantment,  akMagicEffect,  afMagnitude,  aiArea,  aiDuration,  afCost,  asConditionList)
	
	//Adds effectitem from Enchantment to target Enchantment, at given index. Same as above function, but less verbose, and preserves all conditions. Optional cost argument.
export const AddEffectItemToEnchantment = (akEnchantment: Enchantment | null | undefined, akEnchantmentToCopyFrom: Enchantment | null | undefined, aiIndex: number, afCost: number = -1.0): void => sn.AddEffectItemToEnchantment(akEnchantment,  akEnchantmentToCopyFrom,  aiIndex,  afCost)
	
	//Removes magic effect from Enchantment that matches magnitude/area/duration/cost.
export const RemoveMagicEffectFromEnchantment = (akEnchantment: Enchantment | null | undefined, akMagicEffect: MagicEffect | null | undefined, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0): void => sn.RemoveMagicEffectFromEnchantment(akEnchantment,  akMagicEffect,  afMagnitude,  aiArea,  aiDuration,  afCost)
	
	//Removes effectitem from Enchantment that matches Enchantment at index.
export const RemoveEffectItemFromEnchantment = (akEnchantment: Enchantment | null | undefined, akEnchantmentToMatchFrom: Enchantment | null | undefined, aiIndex: number): void => sn.RemoveEffectItemFromEnchantment(akEnchantment,  akEnchantmentToMatchFrom,  aiIndex)
	
//----------------------------------------------------------------------------------------------------------	
//FEC
//----------------------------------------------------------------------------------------------------------
	
	//FEC function
	//returns effect type, effect skill level, and projectile type, of the highest magnitude effect present on the actor
	//permanent - SUN, ACID, FIRE, FROST, SHOCK, DRAIN
	//temporary - POISON, FEAR
export const GetDeathEffectType = (akActor: Actor | null | undefined, type: number): number[] => sn.GetDeathEffectType(akActor,  type)
	
	//0 - charred/skeleton
	//1 - drained
	//2 - poisoned/frightened
	//3-  aged
	//4 - charred creature
	//5 - frozen
export const RemoveEffectsNotOfType = (akActor: Actor | null | undefined, aiEffectType: number): void => sn.RemoveEffectsNotOfType(akActor,  aiEffectType)
	
	// 0 - permanent
	// 1 - temporary
	// 2 - frozenActor
	// 3 - frozenCol
export const SendFECResetEvent = (akActor: Actor | null | undefined, aiType: number, abReset3D: boolean): void => sn.SendFECResetEvent(akActor,  aiType,  abReset3D)
		
//----------------------------------------------------------------------------------------------------------	
//FORM
//----------------------------------------------------------------------------------------------------------

	//-------
	//GETTERS
	//-------
	
	//Record flags
	//https://en.uesp.net/wiki/Skyrim_Mod:Mod_File_Format#Records
	
	//evakluates condition lists for spells/potions/enchantments/mgefs and returns if they can be fullfilled
export const EvaluateConditionList = (akForm: Form | null | undefined, akActionRef: ObjectReference | null | undefined, akTargetRef: ObjectReference | null | undefined): boolean => sn.EvaluateConditionList(akForm,  akActionRef,  akTargetRef)
	
	//Clear record flag
export const ClearRecordFlag = (akForm: Form | null | undefined, aiFlag: number): void => sn.ClearRecordFlag(akForm,  aiFlag)
	
	//Builds a list of conditions present on the form. Index is for spells/other forms that have lists with conditions
	//Some conditions may be skipped (conditions that require non player references, overly complex conditions involving packages/aliases)
export const GetConditionList = (akForm: Form | null | undefined, aiIndex: number = 0): string[] => sn.GetConditionList(akForm,  aiIndex)
	
	//Returns whether the form is part of the mod
export const IsFormInMod = (akForm: Form | null | undefined, asModName: string): boolean => sn.IsFormInMod(akForm,  asModName)
	
	//Returns whether the form is temporary (ie. has a formID beginning with FF)
export const IsGeneratedForm = (akForm: Form | null | undefined): boolean => sn.IsGeneratedForm(akForm)
	
	//Is record flag set?
export const IsRecordFlagSet = (akForm: Form | null | undefined, aiFlag: number): boolean => sn.IsRecordFlagSet(akForm,  aiFlag)
	
	//returns whether the form has script attached. If scriptName is empty, it will return if the form has any non-base scripts attached
export const IsScriptAttachedToForm = (akForm: Form | null | undefined, asScriptName: string): boolean => sn.IsScriptAttachedToForm(akForm,  asScriptName)
	
	//Set record flag
export const SetRecordFlag = (akForm: Form | null | undefined, aiFlag: number): void => sn.SetRecordFlag(akForm,  aiFlag)
	
	//-------
	//SETTERS
	//-------
	
	//Adds keyword to form. Fails if the form doesn't accept keywords.
export const AddKeywordToForm = (akForm: Form | null | undefined, akKeyword: Keyword | null | undefined): void => sn.AddKeywordToForm(akForm,  akKeyword)
	
	//Favorites item (must be in inventory) or spell/shout
export const MarkItemAsFavorite = (akForm: Form | null | undefined): void => sn.MarkItemAsFavorite(akForm)
	
	//Replaces given keyword with new one on form. Only lasts for a single gaming session. [ported from DienesTools].
export const ReplaceKeywordOnForm = (akForm: Form | null | undefined, akKeywordAdd: Keyword | null | undefined, akKeywordRemove: Keyword | null | undefined): void => sn.ReplaceKeywordOnForm(akForm,  akKeywordAdd,  akKeywordRemove)
	
	//Removes keyword, if present, from form.
export const RemoveKeywordOnForm = (akForm: Form | null | undefined, akKeyword: Keyword | null | undefined): boolean => sn.RemoveKeywordOnForm(akForm,  akKeyword)
	
	//Unfavorites item (must be in inventory) or spell/shout
export const UnmarkItemAsFavorite = (akForm: Form | null | undefined): void => sn.UnmarkItemAsFavorite(akForm)

//----------------------------------------------------------------------------------------------------------	
//FURNITURE
//----------------------------------------------------------------------------------------------------------
		
/** FURNITURE TYPES	
		Perch = 0
		Lean = 1
		Sit = 2
		Sleep = 3 */
	
	//Gets furniture type
export const GetFurnitureType = (akFurniture: Furniture | null | undefined): number => sn.GetFurnitureType(akFurniture)
	
//----------------------------------------------------------------------------------------------------------	
//GAME
//----------------------------------------------------------------------------------------------------------
		
	//Gets all enchantments from base game + mods, filtered using optional keyword array
export const GetAllEnchantments = (akKeywords: Keyword[] = null): Enchantment[] => sn.GetAllEnchantments(akKeywords)
	
	//Gets all forms from base game + mods, filtered using formtype and optional keyword array
export const GetAllForms = (aiFormType: number, akKeywords: Keyword[] = null): Form[] => sn.GetAllForms(aiFormType,  akKeywords)
	
	//Gets all races from base game + mods, filtered using optional keyword array
export const GetAllRaces = (akKeywords: Keyword[] = null): Race[] => sn.GetAllRaces(akKeywords)
	
	//Gets all spells from base game + mods, filtered using optional keyword array. IsPlayable filters out spells that are not found in spellbooks. 
export const GetAllSpells = (akKeywords: Keyword[] = null, abIsPlayable: boolean = false): Spell[] => sn.GetAllSpells(akKeywords,  abIsPlayable)
				
	
/** AI PROCESS LEVEL
		HighProcess = 0
		MiddleHighProcess = 1
		MiddleLowProcess = 2
		LowProcess = 3 */
		
	//Gets all actors by AI processing type. https://geck.bethsoft.com/index.php?title=GetActorsByProcessingLevel for more info	
export const GetActorsByProcessingLevel = (aiLevel: number): Actor[] => sn.GetActorsByProcessingLevel(aiLevel)
	
	//Gets all forms added by a specified mod/game esm, filtered using formtype and optional keyword array. 
export const GetAllFormsInMod = (asModName: string, aiFormType: number, akKeywords: Keyword[] = null): Form[] => sn.GetAllFormsInMod(asModName,  aiFormType,  akKeywords)
	
	//Gets all enchantments added by a specified mod/game esm, filtered using optional keyword array. 
export const GetAllEnchantmentsInMod = (asModName: string, akKeywords: Keyword[] = null): Enchantment[] => sn.GetAllEnchantmentsInMod(asModName,  akKeywords)
	
	//Gets all races added by a specified mod/game esm, filtered using optional keyword array. 
export const GetAllRacesInMod = (asModName: string, akKeywords: Keyword[] = null): Race[] => sn.GetAllRacesInMod(asModName,  akKeywords)
	
	//Gets all spells added by a specified mod/game esm, filtered using optional keyword array. 
export const GetAllSpellsInMod = (asModName: string, akKeywords: Keyword[] = null, abIsPlayable: boolean = false): Spell[] => sn.GetAllSpellsInMod(asModName,  akKeywords,  abIsPlayable)
	
	//Gets current cell if in interior/attached cells in exterior/sky cells if in worldspace with no attached cells??
export const GetAttachedCells = (): Cell[] => sn.GetAttachedCells()
	
	//Gets the value of the boolean gamesetting. Returns -1 if gmst is None or not a bool.
export const GetGameSettingBool = (asGameSetting: string): number => sn.GetGameSettingBool(asGameSetting)
	
	//Gets local gravity of the exterior worldspace/interior cell. Default gravity is [0.0, 0.0, -9.81]
export const GetLocalGravity = (): number[] => sn.GetLocalGravity()
	
	//Gets how many actors are in high process
export const GetNumActorsInHigh = (): number => sn.GetNumActorsInHigh()
	
	//Returns whether plugin exists
export const IsPluginFound = (akName: string): boolean => sn.IsPluginFound(akName)
	
	//Returns whether CC Survival Mode is enabled
export const IsSurvivalModeActive = (): boolean => sn.IsSurvivalModeActive()
	
	//Sets local gravity (ms-2) of the exterior worldspace/interior cell. 
export const SetLocalGravity = (afXAxis: number, afYAxis: number, afZAxis: number): void => sn.SetLocalGravity(afXAxis,  afYAxis,  afZAxis)
	
//----------------------------------------------------------------------------------------------------------	
//HAZARD
//----------------------------------------------------------------------------------------------------------

	//-------
	//GETTERS
	//-------
	
export const kHazard_None = 0
export const kHazard_PCOnly = 0x00000001
export const kHazard_InheritDuration = 0x00000002
export const kHazard_AlignToNormal = 0x00000004
export const kHazard_InheritRadius = 0x00000008
export const kHazard_DropToGround = 0x00000010
	
	//Gets hazard art path, eg. "Effects/MyHazardArt.nif"
export const GetHazardArt = (akHazard: Hazard | null | undefined): string => sn.GetHazardArt(akHazard)
	
	//Gets associated IMOD
export const GetHazardIMOD = (akHazard: Hazard | null | undefined): ImageSpaceModifier | null | undefined => sn.GetHazardIMOD(akHazard)

	//Gets IMOD radius
export const GetHazardIMODRadius = (akHazard: Hazard | null | undefined): number => sn.GetHazardIMODRadius(akHazard)
	
	//Gets impact data set 
export const GetHazardIPDS = (akHazard: Hazard | null | undefined): ImpactDataSet | null | undefined => sn.GetHazardIPDS(akHazard)
	
	//Gets hazard lifetime
export const GetHazardLifetime = (akHazard: Hazard | null | undefined): number => sn.GetHazardLifetime(akHazard)
	
	//Gets hazard light
export const GetHazardLight = (akHazard: Hazard | null | undefined): Light | null | undefined => sn.GetHazardLight(akHazard)

	//Gets hazard limit
export const GetHazardLimit = (akHazard: Hazard | null | undefined): number => sn.GetHazardLimit(akHazard)
	
	//Gets hazard radius
export const GetHazardRadius = (akHazard: Hazard | null | undefined): number => sn.GetHazardRadius(akHazard)

	//Gets hazard sound
export const GetHazardSound = (akHazard: Hazard | null | undefined): SoundDescriptor | null | undefined => sn.GetHazardSound(akHazard)
	
	//Gets hazard spell
export const GetHazardSpell = (akHazard: Hazard | null | undefined): Spell | null | undefined => sn.GetHazardSpell(akHazard)

	//Gets target interval (duration between casts)
export const GetHazardTargetInterval = (akHazard: Hazard | null | undefined): number => sn.GetHazardTargetInterval(akHazard)

	//Is hazard flag set?
export const IsHazardFlagSet = (akHazard: Hazard | null | undefined, aiFlag: number): boolean => sn.IsHazardFlagSet(akHazard,  aiFlag)

	//-------
	//SETTERS
	//-------
	
	//Clears hazard flag
export const ClearHazardFlag = (akHazard: Hazard | null | undefined, aiFlag: number): void => sn.ClearHazardFlag(akHazard,  aiFlag)
	
	//Sets hazard art path. Does not work on active hazards
export const SetHazardArt = (akHazard: Hazard | null | undefined, asPath: string): void => sn.SetHazardArt(akHazard,  asPath)

	//Set flag
export const SetHazardFlag = (akHazard: Hazard | null | undefined, aiFlag: number): void => sn.SetHazardFlag(akHazard,  aiFlag)

	//Sets IMOD
export const SetHazardIMOD = (akHazard: Hazard | null | undefined, akIMOD: ImageSpaceModifier | null | undefined): void => sn.SetHazardIMOD(akHazard,  akIMOD)

	//Sets IMOD radius
export const SetHazardIMODRadius = (akHazard: Hazard | null | undefined, afRadius: number): void => sn.SetHazardIMODRadius(akHazard,  afRadius)
	
	//Sets impact data set
export const SetHazardIPDS = (akHazard: Hazard | null | undefined, akIPDS: ImpactDataSet | null | undefined): void => sn.SetHazardIPDS(akHazard,  akIPDS)
	
	//Sets hazard lifetime
export const SetHazardLifetime = (akHazard: Hazard | null | undefined, afLifetime: number): void => sn.SetHazardLifetime(akHazard,  afLifetime)
	
	//Sets hazard light
export const SetHazardLight = (akHazard: Hazard | null | undefined, akLight: Light | null | undefined): void => sn.SetHazardLight(akHazard,  akLight)

	//Sets hazard limit
export const SetHazardLimit = (akHazard: Hazard | null | undefined, aiLimit: number): void => sn.SetHazardLimit(akHazard,  aiLimit)
	
	//Sets hazard radius
export const SetHazardRadius = (akHazard: Hazard | null | undefined, afRadius: number): void => sn.SetHazardRadius(akHazard,  afRadius)

	//Sets hazard sound
export const SetHazardSound = (akHazard: Hazard | null | undefined, akSound: SoundDescriptor | null | undefined): void => sn.SetHazardSound(akHazard,  akSound)

	//Sets hazard spell
export const SetHazardSpell = (akHazard: Hazard | null | undefined, akspell: Spell | null | undefined): void => sn.SetHazardSpell(akHazard,  akspell)

	//Sets hazard interval
export const SetHazardTargetInterval = (akHazard: Hazard | null | undefined, afInterval: number): void => sn.SetHazardTargetInterval(akHazard,  afInterval)
		
//----------------------------------------------------------------------------------------------------------
//LIGHT
//----------------------------------------------------------------------------------------------------------

	//-------
	//GETTERS
	//-------

	//Gets light color.
export const GetLightColor = (akLight: Light | null | undefined): ColorForm | null | undefined => sn.GetLightColor(akLight)
		
	//Gets light fade range.
export const GetLightFade = (akLight: Light | null | undefined): number => sn.GetLightFade(akLight)
	
	//Gets base light FOV.
export const GetLightFOV = (akLight: Light | null | undefined): number => sn.GetLightFOV(akLight)
	
	//Gets light radius (radius is actually int but changing that would break mods so fixed that in source).
export const GetLightRadius = (akLight: Light | null | undefined): number => sn.GetLightRadius(akLight)
	
	//Gets light color as RGB array [0-255].
export const GetLightRGB = (akLight: Light | null | undefined): number[] => sn.GetLightRGB(akLight)
	
	//Gets depth bias, returns 1 if not set.
export const GetLightShadowDepthBias = (akLightObject: ObjectReference | null | undefined): number => sn.GetLightShadowDepthBias(akLightObject)
	
/** LIGHT TYPES
		HemiShadow = 1,
		Omni = 2;
		OmniShadow = 3,
		Spot = 4,
		SpotShadow = 5, */
	
	//Get light type
export const GetLightType = (akLight: Light | null | undefined): number => sn.GetLightType(akLight)
	
	//-------
	//SETTERS
	//-------
	
	//Sets light color.
export const SetLightColor = (akLight: Light | null | undefined, akColorform: ColorForm | null | undefined): void => sn.SetLightColor(akLight,  akColorform)
		
	//Sets light fade range.
export const SetLightFade = (akLight: Light | null | undefined, afRange: number): void => sn.SetLightFade(akLight,  afRange)
		
	//sets base light FOV.
export const SetLightFOV = (akLight: Light | null | undefined, afFOV: number): void => sn.SetLightFOV(akLight,  afFOV)
	
	//Sets light radius (minimum light radius is 16) .
export const SetLightRadius = (akLight: Light | null | undefined, afRadius: number): void => sn.SetLightRadius(akLight,  afRadius)
	
	//Sets light color using RGB array [0-255]. Array must contain 3 elements (r,g,b).
export const SetLightRGB = (akLight: Light | null | undefined, aiRGB: number[]): void => sn.SetLightRGB(akLight,  aiRGB)
	
	//sets depth bias on light reference. Creates new depth bias extradata on lights that don't have it set.
export const SetLightShadowDepthBias = (akLightObject: ObjectReference | null | undefined, afDepthBias: number): void => sn.SetLightShadowDepthBias(akLightObject,  afDepthBias)
	
	//Sets light type. Does not persist between sessions.
export const SetLightType = (akLight: Light | null | undefined, aiLightType: number): void => sn.SetLightType(akLight,  aiLightType)
	
//----------------------------------------------------------------------------------------------------------
//LOCATION
//----------------------------------------------------------------------------------------------------------

	//-------
	//GETTERS
	//-------

	//Get parent location.
export const GetParentLocation = (akLoc: Location | null | undefined): Location | null | undefined => sn.GetParentLocation(akLoc)
	
	//-------
	//SETTERS
	//-------
	
	//Set parent location.
export const SetParentLocation = (akLoc: Location | null | undefined, akNewLoc: Location | null | undefined): void => sn.SetParentLocation(akLoc,  akNewLoc)
	
//----------------------------------------------------------------------------------------------------------		
//MAGIC EFFECTS
//----------------------------------------------------------------------------------------------------------		

	//---------
	//GETTERS
	//---------
	
	//Gets associated form (Light for Light spells, Actor for Summon Creature...), if any
export const GetAssociatedForm = (akMagicEffect: MagicEffect | null | undefined): Form | null | undefined => sn.GetAssociatedForm(akMagicEffect)
	
/** EFFECT ARCHETYPES
		ValueMod = 0
		Script = 1
		Dispel = 2
		CureDisease = 3
		Absorb = 4
		DualValueMod = 5
		Calm = 6
		Demoralize = 7
		Frenzy = 8
		Disarm = 9
		CommandSummoned = 10
		Invisibility = 11
		Light = 12
		Darkness = 13
		NightEye = 14
		Lock = 15
		Open = 16
		BoundWeapon = 17
		SummonCreature = 18
		DetectLife = 19
		Telekinesis = 20
		Paralysis = 21
		Reanimate = 22
		SoulTrap = 23
		TurnUndead = 24
		Guide = 25
		WerewolfFeed = 26
		CureParalysis = 27
		CureAddiction = 28
		CurePoison = 29
		Concussion = 30
		ValueAndParts = 31
		AccumulateMagnitude = 32
		Stagger = 33
		PeakValueMod = 34
		Cloak = 35
		Werewolf = 36
		SlowTime = 37
		Rally = 38
		EnhanceWeapon = 39
		SpawnHazard = 40
		Etherealize = 41
		Banish = 42
		SpawnScriptedRef = 43
		Disguise = 44
		GrabActor = 45
		VampireLord = 46 */
	
	//Gets effect archetype of magiceffect and returns as int (0-46).
export const GetEffectArchetypeAsInt = (akMagicEffect: MagicEffect | null | undefined): number => sn.GetEffectArchetypeAsInt(akMagicEffect)
	
	//Gets effect archetype of magiceffect and returns as String.
export const GetEffectArchetypeAsString = (akMagicEffect: MagicEffect | null | undefined): string => sn.GetEffectArchetypeAsString(akMagicEffect)
	
	//Gets primary actor value as string, if any (FrostResist, SpeedMult).
export const GetPrimaryActorValue = (akMagicEffect: MagicEffect | null | undefined): string => sn.GetPrimaryActorValue(akMagicEffect)
	
	//Gets secondary actor value as string, if any.
export const GetSecondaryActorValue = (akMagicEffect: MagicEffect | null | undefined): string => sn.GetSecondaryActorValue(akMagicEffect)
		
/** MGEF SOUND TYPES
		Draw/Sheathe = 0
		Charge = 1
		Ready = 2
		Release = 3
		Concentration Cast Loop = 4
		On Hit = 5 */
	
	//Gets Sound attached to index of Sound type specified in magic effect.
export const GetMagicEffectSound = (akMagicEffect: MagicEffect | null | undefined, aiType: number): SoundDescriptor | null | undefined => sn.GetMagicEffectSound(akMagicEffect,  aiType)
	
	//-------
	//SETTERS
	//-------
	
	//Sets associated form (Light for Light spells, Actor for Summon Creature...). Can be None
export const SetAssociatedForm = (akMagicEffect: MagicEffect | null | undefined, akForm: Form | null | undefined): void => sn.SetAssociatedForm(akMagicEffect,  akForm)
	
	//Sets sound descriptor attached to index of Sound type specified in magic effect.
export const SetMagicEffectSound = (akMagicEffect: MagicEffect | null | undefined, akSoundDescriptor: SoundDescriptor | null | undefined, aiType: number): void => sn.SetMagicEffectSound(akMagicEffect,  akSoundDescriptor,  aiType)
	
//----------------------------------------------------------------------------------------------------------
//OBJECTREFERENCES
//----------------------------------------------------------------------------------------------------------

	//--------
	//GETTERS
	//--------
		
	//Adds all inventory items to array, filtering out equipped, favourited and quest items. 
export const AddAllItemsToArray = (akRef: ObjectReference | null | undefined, abNoEquipped: boolean = true, abNoFavorited: boolean = false, abNoQuestItem: boolean = false): Form[] => sn.AddAllItemsToArray(akRef,  abNoEquipped,  abNoFavorited,  abNoQuestItem)
	
	//Adds all inventory items to formlist, filtering out equipped, favourited and quest items. 
export const AddAllItemsToList = (akRef: ObjectReference | null | undefined, akList: FormList | null | undefined, abNoEquipped: boolean = true, abNoFavorited: boolean = false, abNoQuestItem: boolean = false): void => sn.AddAllItemsToList(akRef,  akList,  abNoEquipped,  abNoFavorited,  abNoQuestItem)
	
	//Adds inventory items matching formtype to array, filtering out equipped, favourited and quest items. 
export const AddItemsOfTypeToArray = (akRef: ObjectReference | null | undefined, aiFormType: number, abNoEquipped: boolean = true, abNoFavorited: boolean = false, abNoQuestItem: boolean = false): Form[] => sn.AddItemsOfTypeToArray(akRef,  aiFormType,  abNoEquipped,  abNoFavorited,  abNoQuestItem)
	
	//Adds inventory items matching formtype to formlist, filtering out equipped, favourited and quest items. 
export const AddItemsOfTypeToList = (akRef: ObjectReference | null | undefined, akList: FormList | null | undefined, aiFormType: number, abNoEquipped: boolean = true, abNoFavorited: boolean = false, abNoQuestItem: boolean = false): void => sn.AddItemsOfTypeToList(akRef,  akList,  aiFormType,  abNoEquipped,  abNoFavorited,  abNoQuestItem)
	
	//Finds all references of form type in loaded cells, within radius from ref. If afRadius is 0, it will get all references from all attached cells
export const FindAllReferencesOfFormType = (akRef: ObjectReference | null | undefined, formType: number, afRadius: number): ObjectReference[] => sn.FindAllReferencesOfFormType(akRef,  formType,  afRadius)
	
	//Find all references with keyword in loaded cells, within radius from ref. If afRadius is 0, it will get all references from all attached cells
export const FindAllReferencesWithKeyword = (akRef: ObjectReference | null | undefined, keywordOrList: Form | null | undefined, afRadius: number, abMatchAll: boolean): ObjectReference[] => sn.FindAllReferencesWithKeyword(akRef,  keywordOrList,  afRadius,  abMatchAll)
	
	//Find all references matching base form/in formlist, within radius from ref. If afRadius is 0, it will get all references from all attached cells
export const FindAllReferencesOfType = (akRef: ObjectReference | null | undefined, akFormOrList: Form | null | undefined, afRadius: number): ObjectReference[] => sn.FindAllReferencesOfType(akRef,  akFormOrList,  afRadius)
	
	//Gets the first item in inventory that exists in formlist.
export const FindFirstItemInList = (akRef: ObjectReference | null | undefined, akList: FormList | null | undefined): Form | null | undefined => sn.FindFirstItemInList(akRef,  akList)
	
	//Gets activate children - see IsActivateChild
export const GetActivateChildren = (akRef: ObjectReference | null | undefined): ObjectReference[] => sn.GetActivateChildren(akRef)
	
	//Gets current gamebryo animation
export const GetActiveGamebryoAnimation = (akRef: ObjectReference | null | undefined): string => sn.GetActiveGamebryoAnimation(akRef)
	
	//Gets actor responsible for object.
export const GetActorCause = (akRef: ObjectReference | null | undefined): Actor | null | undefined => sn.GetActorCause(akRef)
	
	//Get all art objects attached to this object.
export const GetAllArtObjects = (akRef: ObjectReference | null | undefined): Art[] => sn.GetAllArtObjects(akRef)
	
	//Get all effect shaders attached to this object.
export const GetAllEffectShaders = (akRef: ObjectReference | null | undefined): EffectShader[] => sn.GetAllEffectShaders(akRef)
		
	//Gets closest actor to ref (without returning the reference itself).
export const GetClosestActorFromRef = (akRef: ObjectReference | null | undefined, abIgnorePlayer: boolean): Actor | null | undefined => sn.GetClosestActorFromRef(akRef,  abIgnorePlayer)
	
	//Gets duration of the effectshader on the ref.
export const GetEffectShaderDuration = (akRef: ObjectReference | null | undefined, akShader: EffectShader | null | undefined): number => sn.GetEffectShaderDuration(akRef,  akShader)
	
	//Gets the door which is linked to this load door.
export const GetDoorDestination = (akRef: ObjectReference | null | undefined): ObjectReference | null | undefined => sn.GetDoorDestination(akRef)
	
	//Gets all refs linked to akRef. Keyword optional.
export const GetLinkedChildren = (akRef: ObjectReference | null | undefined, akKeyword: Keyword | null | undefined): ObjectReference[] => sn.GetLinkedChildren(akRef,  akKeyword)
	
	//Gets the source of the magic effect (spell/enchantment/scroll etc) and the caster. Magic effect must be present on the reference.
export const GetMagicEffectSource = (akRef: ObjectReference | null | undefined, akEffect: MagicEffect | null | undefined): Form[] => sn.GetMagicEffectSource(akRef,  akEffect)
		
/** MATERIAL TYPES - String
		StoneBroken
		BlockBlade1Hand
		Meat
		CarriageWheel
		MetalLight
		WoodLight
		Snow
		Gravel
		ChainMetal
		Bottle
		Wood
		Ash
		Skin
		BlockBlunt
		DLC1DeerSkin
		Insect
		Barrel
		CeramicMedium
		Basket
		Ice
		GlassStairs
		StoneStairs
		Water
		DraugrSkeleton
		Blade1Hand
		Book
		Carpet
		MetalSolid
		Axe1Hand
		BlockBlade2Hand
		OrganicLarge
		Amulet
		WoodStairs
		Mud
		BoulderSmall
		SnowStairs
		StoneHeavy
		DragonSkeleton
		Trap
		BowsStaves
		Alduin
		BlockBowsStaves
		WoodAsStairs
		SteelGreatSword
		Grass
		BoulderLarge
		StoneAsStairs
		Blade2Hand
		BottleSmall
		BoneActor
		Sand
		MetalHeavy
		DLC1SabreCatPelt
		IceForm
		Dragon
		Blade1HandSmall
		SkinSmall
		PotsPans
		SkinSkeleton
		Blunt1Hand
		StoneStairsBroken
		SkinLarge
		Organic
		Bone
		WoodHeavy
		Chain
		Dirt
		Ghost
		SkinMetalLarge
		BlockAxe
		ArmorLight
		ShieldLight
		Coin
		BlockBlunt2Hand
		ShieldHeavy
		ArmorHeavy
		Arrow
		Glass
		Stone
		WaterPuddle
		Cloth
		SkinMetalSmall
		Ward
		Web
		TrailerSteelSword
		Blunt2Hand
		DLC1SwingingBridge
		BoulderMedium */
	
	//Gets the specified collision shape's havok material types as string array. Returns the first material type if nodeName is empty
export const GetMaterialType = (akRef: ObjectReference | null | undefined, asNodeName: string = ""): string[] => sn.GetMaterialType(akRef,  asNodeName)
	
	//Gets the motion type of the object (see vanilla SetMotionType for types). Returns -1 if 3d is not loaded
export const GetMotionType = (akRef: ObjectReference | null | undefined): number => sn.GetMotionType(akRef)
	
	//Gets random actor near ref (without returning the reference itself).
export const GetRandomActorFromRef = (akRef: ObjectReference | null | undefined, afRadius: number, abIgnorePlayer: boolean): Actor | null | undefined => sn.GetRandomActorFromRef(akRef,  afRadius,  abIgnorePlayer)
	
	//Gets quest items in this ref's inventory, if any
export const GetQuestItems = (akRef: ObjectReference | null | undefined, abNoEquipped: boolean = false, abNoFavorited: boolean = false): Form[] => sn.GetQuestItems(akRef,  abNoEquipped,  abNoFavorited)
	
	//Get all aliases containing this ref
export const GetRefAliases = (akRef: ObjectReference | null | undefined): Alias[] => sn.GetRefAliases(akRef)
		
	//Returns the size of the stored soul in a soulgem objectreference
export const GetStoredSoulSize = (akRef: ObjectReference | null | undefined): number => sn.GetStoredSoulSize(akRef)
	
	//Returns the number of instances of the specified art object (attached using visual effects) on the reference.
export const HasArtObject = (akRef: ObjectReference | null | undefined, akArtObject: Art | null | undefined, abActive: boolean = false): number => sn.HasArtObject(akRef,  akArtObject,  abActive)
	
	//Returns the number of instances of the specified effect shader on the reference.
export const HasEffectShader = (akRef: ObjectReference | null | undefined, akShader: EffectShader | null | undefined, abActive: boolean = false): number => sn.HasEffectShader(akRef,  akShader,  abActive)
	
	//Returns whether the reference has niextradata (attached to root 3D node). Partial matches accepted.
export const HasNiExtraData = (akRef: ObjectReference | null | undefined, asName: string): boolean => sn.HasNiExtraData(akRef,  asName)
	
	//Is door a load door?
export const IsLoadDoor = (akRef: ObjectReference | null | undefined): boolean => sn.IsLoadDoor(akRef)
	
	//Is a quest object?
export const IsQuestItem = (akRef: ObjectReference | null | undefined): boolean => sn.IsQuestItem(akRef)
	
	//Is a VIP (actor that is needed by quest)?
export const IsVIP = (akRef: ObjectReference | null | undefined): boolean => sn.IsVIP(akRef)
	
	//-------
	//SETTERS
	//-------
		
	//Applies material shader to reference (doesn't have to be static)
export const ApplyMaterialShader = (akRef: ObjectReference | null | undefined, akMatObject: MaterialObject, directionalThresholdAngle: number): void => sn.ApplyMaterialShader(akRef,  akMatObject,  directionalThresholdAngle)
	
	//Wrapper function for AddKeywordToForm.
export const AddKeywordToRef = (akRef: ObjectReference | null | undefined, akKeyword: Keyword | null | undefined): void => sn.AddKeywordToRef(akRef,  akKeyword)
	
	//Snaps the object to the nearest navmesh point closest to its current position in the cell.
export const MoveToNearestNavmeshLocation = (akRef: ObjectReference | null | undefined): void => sn.MoveToNearestNavmeshLocation(akRef)
				
	//Wrapper function for RemoveKeywordFromForm.
export const RemoveKeywordFromRef = (akRef: ObjectReference | null | undefined, akKeyword: Keyword | null | undefined): boolean => sn.RemoveKeywordFromRef(akRef,  akKeyword)
	
	//Wrapper function for ReplaceKeywordOnForm.
export const ReplaceKeywordOnRef = (akRef: ObjectReference | null | undefined, akKeywordAdd: Keyword | null | undefined, akKeywordRemove: Keyword | null | undefined): void => sn.ReplaceKeywordOnRef(akRef,  akKeywordAdd,  akKeywordRemove)
	
	//Plays debug shader on the reference, with normalised RGBA color (or fully white if empty)
export const PlayDebugShader = (akRef: ObjectReference | null | undefined, afRGBA: number[]): void => sn.PlayDebugShader(akRef,  afRGBA)
	
	//Scales node & collision (bhkBoxShape, bhkSphereShape). Entire nif will be scaled if string is empty. Collision has to be directly attached to named nodes.
	//Adds "PO3_SCALE" niextradata to root node.
export const ScaleObject3D = (akRef: ObjectReference | null | undefined, asNodeName: string, afScale: number): void => sn.ScaleObject3D(akRef,  asNodeName,  afScale)
	
	//Sets the base object of this reference and reloads 3D
export const SetBaseObject = (akRef: ObjectReference | null | undefined, akBaseObject: Form | null | undefined): void => sn.SetBaseObject(akRef,  akBaseObject)
	
	//Sets the door as the new linked door
export const SetDoorDestination = (akRef: ObjectReference | null | undefined, akDoor: ObjectReference | null | undefined): boolean => sn.SetDoorDestination(akRef,  akDoor)
	
	//Sets effectshader duration. Internal duration is set when the effectshader begins and does not change with time.
export const SetEffectShaderDuration = (akRef: ObjectReference | null | undefined, akShader: EffectShader | null | undefined, afTime: number, abAbsolute: boolean): void => sn.SetEffectShaderDuration(akRef,  akShader,  afTime,  abAbsolute)
		
	//Sets linked ref. Pass None into akTargetRef to unset the linked ref.
export const SetLinkedRef = (akRef: ObjectReference | null | undefined, akTargetRef: ObjectReference | null | undefined, akKeyword: Keyword | null | undefined = null): void => sn.SetLinkedRef(akRef,  akTargetRef,  akKeyword)
	
	//Sets havok material type. Use oldMaterial string to select what material you want to change from to (eg. from stone to wood), and nodeName to apply it to the specific node. 
	//If both are empty, every collision material will be set.
export const SetMaterialType = (akRef: ObjectReference | null | undefined, asNewMaterial: string, asOldMaterial: string = "", asNodeName: string = ""): void => sn.SetMaterialType(akRef,  asNewMaterial,  asOldMaterial,  asNodeName)
	
	//Copies skin tint color from actorbase to bodyparts nif
export const SetupBodyPartGeometry = (akRef: ObjectReference | null | undefined, akActor: Actor | null | undefined): void => sn.SetupBodyPartGeometry(akRef,  akActor)
	
	//SHADER TYPES
export const kDefault = 0
export const kEnvironmentMap = 1
export const kGlowMap = 2
export const kParallax = 3
export const kFaceGen = 4
export const kFaceGenRGBTint = 5
export const kHairTint = 6
export const kParallaxOcc = 7
export const kMultiTexLand = 8
export const kLODLand = 9
export const kMultilayerParallax = 11
export const kTreeAnim = 12
export const kMultiIndexTriShapeSnow = 14
export const kLODObjectsHD = 15
export const kEye = 16
export const kCloud = 17
export const kLODLandNoise = 18
export const kMultiTexLandLODBlend = 19
	
	//sets the ref's shader material type ie. default to cubemap
	//template needs to be loaded
	//if texture type is -1, the reference's entire textureset is replaced using the template's textureset//
	//if texture type is 0-9 the template's textureset is still applied but reference's texture at that index will take priority.
	//optional diffuse path can be used to filter shapes to apply the shader to, partial matches are accepted like "Draugr.dds"
	//limitations - cannot be used on geometry with no normals (ie. body skin meshes)	
export const SetShaderType = (akRef: ObjectReference | null | undefined, akTemplate: ObjectReference | null | undefined, asDiffusePath: string, aiShaderType: number, aiTextureType: number, abNoWeapons: boolean, abNoAlphaProperty: boolean): void => sn.SetShaderType(akRef,  akTemplate,  asDiffusePath,  aiShaderType,  aiTextureType,  abNoWeapons,  abNoAlphaProperty)
								
	//Stops ALL effect shaders and art objects (visual effects) currently on this actor
export const StopAllShaders = (akRef: ObjectReference | null | undefined): void => sn.StopAllShaders(akRef)
	
	//Removes all instances of the art object (hit magic effect/visual effect) attached to the reference.
export const StopArtObject = (akRef: ObjectReference | null | undefined, akArt: Art | null | undefined): void => sn.StopArtObject(akRef,  akArt)
	
	//Toggles node visibility.
export const ToggleChildNode = (akRef: ObjectReference | null | undefined, asNodeName: string, abDisable: boolean): void => sn.ToggleChildNode(akRef,  asNodeName,  abDisable)
	
	//Updates node data. Move hit effect art to new node (ie. from "MagicEffectsNode" to "NPC Head [Head]") or update translate, rotate, and scale values.
	//Translate and Rotate arrays must have three values in order to work. Rotate uses euler angles in degrees (XYZ). Scale is relative, and is multiplied by existing scale.
	//If the hit effect art is removed and reattached, it will revert back to the values in the nif.
export const UpdateHitEffectArtNode = (akRef: ObjectReference | null | undefined, akArt: Art | null | undefined, asNewNode: string, afTranslate: number[], afRotate: number[], afRelativeScale: number = 1.0): void => sn.UpdateHitEffectArtNode(akRef,  akArt,  asNewNode,  afTranslate,  afRotate,  afRelativeScale)
							
//----------------------------------------------------------------------------------------------------------
//PACKAGES
//----------------------------------------------------------------------------------------------------------

	//-------
	//GETTERS
	//-------
	
/** PACKAGE TYPES
		Find = 0
		Follow = 1
		Escort = 2
		Eat = 3
		Sleep = 4
		Wander = 5
		Travel = 6
		Accompany = 7
		UseItemAt = 8
		Ambush = 9
		FleeNotCombat = 10
		CastMagic = 11
		Sandbox = 12
		Patrol = 13
		Guard = 14
		Dialogue = 15
		UseWeapon = 16
		Find2 = 17
		Package = 18
		PackageTemplate = 19
		Activate = 20
		Alarm = 21
		Flee = 22
		Trespass = 23
		Spectator = 24
		ReactToDead = 25
		GetUpFromChair = 26
		DoNothing = 27
		InGameDialogue = 28
		Surface =  29
		SearchForAttacker = 30
		AvoidPlayer = 31
		ReactToDestroyedObject = 32
		ReactToGrenadeOrMine = 33
		StealWarning = 34
		PickPocketWarning = 35
		MovementBlocked = 36
		VampireFeed = 37
		CannibalFeed = 38
		Unknown39 = 39
		Unknown40 = 40
		Unknown41 = 41 */
	
	//Gets package type. Returns -1 if package is none
export const GetPackageType = (akPackage: Package | null | undefined): number => sn.GetPackageType(akPackage)
	
	//Gets all idles on this package
export const GetPackageIdles = (akPackage: Package | null | undefined): Idle[] => sn.GetPackageIdles(akPackage)
	
	//-------
	//SETTERS
	//-------
	
	//Adds idle to the end of the package idle stack, creating it if needed.
export const AddPackageIdle = (akPackage: Package | null | undefined, akIdle: Idle | null | undefined): void => sn.AddPackageIdle(akPackage,  akIdle)
	
	//Removes idle from package
export const RemovePackageIdle = (akPackage: Package | null | undefined, akIdle: Idle | null | undefined): void => sn.RemovePackageIdle(akPackage,  akIdle)
	
//----------------------------------------------------------------------------------------------------------
//PAPYRUS EXTENDER
//----------------------------------------------------------------------------------------------------------

	//returns current version as int array (major,minor,patch / 4,3,7)
export const GetPapyrusExtenderVersion = (): number[] => sn.GetPapyrusExtenderVersion()
	
//-----------------------------------------------------------------------------------------------------------	
//POTION - see SPELL
//-----------------------------------------------------------------------------------------------------------	
	
export const AddMagicEffectToPotion = (akPotion: Potion | null | undefined, akMagicEffect: MagicEffect | null | undefined, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0, asConditionList: string[]): void => sn.AddMagicEffectToPotion(akPotion,  akMagicEffect,  afMagnitude,  aiArea,  aiDuration,  afCost,  asConditionList)
	
	//Adds effectitem from Potion to target Potion, at given index. Same as above function, but less verbose, and preserves all conditions. Optional cost argument.
export const AddEffectItemToPotion = (akPotion: Potion | null | undefined, akPotionToCopyFrom: Potion | null | undefined, aiIndex: number, afCost: number = -1.0): void => sn.AddEffectItemToPotion(akPotion,  akPotionToCopyFrom,  aiIndex,  afCost)
	
	//Removes magic effect from Potion that matches magnitude/area/duration/cost.
export const RemoveMagicEffectFromPotion = (akPotion: Potion | null | undefined, akMagicEffect: MagicEffect | null | undefined, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0): void => sn.RemoveMagicEffectFromPotion(akPotion,  akMagicEffect,  afMagnitude,  aiArea,  aiDuration,  afCost)
	
	//Removes effectitem from Potion that matches Potion at index.
export const RemoveEffectItemFromPotion = (akPotion: Potion | null | undefined, akPotionToMatchFrom: Potion | null | undefined, aiIndex: number): void => sn.RemoveEffectItemFromPotion(akPotion,  akPotionToMatchFrom,  aiIndex)
		
//----------------------------------------------------------------------------------------------------------
//PROJECTILES
//----------------------------------------------------------------------------------------------------------

	//--------
	//GETTERS
	//--------
	
	//Gets projectile gravity (usually 0.0 for non arrow projectiles).
export const GetProjectileGravity = (akProjectile: Projectile | null | undefined): number => sn.GetProjectileGravity(akProjectile)
	
	//Gets projectile impact force. 
export const GetProjectileImpactForce = (akProjectile: Projectile | null | undefined): number => sn.GetProjectileImpactForce(akProjectile)
	
	//Gets projectile range.
export const GetProjectileRange = (akProjectile: Projectile | null | undefined): number => sn.GetProjectileRange(akProjectile)
	
	//Gets projectile speed.
export const GetProjectileSpeed = (akProjectile: Projectile | null | undefined): number => sn.GetProjectileSpeed(akProjectile)
	
	
/** PROJECTILE TYPES
		Missile = 1
		Lobber = 2
		Beam = 3
		Flame = 4
		Cone = 5
		Barrier = 6
		Arrow = 7 */
	
	//Get projectile type. 0 if projectile is None.
export const GetProjectileType = (akProjectile: Projectile | null | undefined): number => sn.GetProjectileType(akProjectile)
	
	//-------
	//SETTERS
	//-------
	
	//Sets projectile gravity. 
export const SetProjectileGravity = (akProjectile: Projectile | null | undefined, afGravity: number): void => sn.SetProjectileGravity(akProjectile,  afGravity)
	
	//Sets projectile impact force. 
export const SetProjectileImpactForce = (akProjectile: Projectile | null | undefined, afImpactForce: number): void => sn.SetProjectileImpactForce(akProjectile,  afImpactForce)
	
	//Sets projectile range.
export const SetProjectileRange = (akProjectile: Projectile | null | undefined, afRange: number): void => sn.SetProjectileRange(akProjectile,  afRange)
	
	//Sets projectile speed. 
export const SetProjectileSpeed = (akProjectile: Projectile | null | undefined, afSpeed: number): void => sn.SetProjectileSpeed(akProjectile,  afSpeed)

//-----------------------------------------------------------------------------------------------------------	
//SCROLL - see SPELL
//-----------------------------------------------------------------------------------------------------------	
	
export const AddMagicEffectToScroll = (akScroll: Scroll | null | undefined, akMagicEffect: MagicEffect | null | undefined, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0, asConditionList: string[]): void => sn.AddMagicEffectToScroll(akScroll,  akMagicEffect,  afMagnitude,  aiArea,  aiDuration,  afCost,  asConditionList)
	
	//Adds effectitem from Scroll to target Scroll, at given index. Same as above function, but less verbose, and preserves all conditions. Optional cost argument.
export const AddEffectItemToScroll = (akScroll: Scroll | null | undefined, akScrollToCopyFrom: Scroll | null | undefined, aiIndex: number, afCost: number = -1.0): void => sn.AddEffectItemToScroll(akScroll,  akScrollToCopyFrom,  aiIndex,  afCost)
	
	//Removes magic effect from Scroll that matches magnitude/area/duration/cost.
export const RemoveMagicEffectFromScroll = (akScroll: Scroll | null | undefined, akMagicEffect: MagicEffect | null | undefined, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0): void => sn.RemoveMagicEffectFromScroll(akScroll,  akMagicEffect,  afMagnitude,  aiArea,  aiDuration,  afCost)
	
	//Removes effectitem from Scroll that matches Scroll at index.
export const RemoveEffectItemFromScroll = (akScroll: Scroll | null | undefined, akScrollToMatchFrom: Scroll | null | undefined, aiIndex: number): void => sn.RemoveEffectItemFromScroll(akScroll,  akScrollToMatchFrom,  aiIndex)
	
//-----------------------------------------------------------------------------------------------------------	
//SOUND
//-----------------------------------------------------------------------------------------------------------	

	//Sets sound descriptor attached to the sound.	
export const SetSoundDescriptor = (akSound: Sound | null | undefined, akSoundDescriptor: SoundDescriptor | null | undefined): void => sn.SetSoundDescriptor(akSound,  akSoundDescriptor)
	
//-----------------------------------------------------------------------------------------------------------	
//SPELL
//-----------------------------------------------------------------------------------------------------------	
	//--------
	//GETTERS
	//--------
	
/** SPELL TYPES
		Spell = 0
		Disease = 1
		Power = 2
		LesserPower = 3
		Ability = 4
		Poison = 5
		Addition = 6
		Voice = 7 */
	
	//Returns spell type. -1 if spell is None
export const GetSpellType = (akSpell: Spell | null | undefined): number => sn.GetSpellType(akSpell)
		
	//--------
	//SETTERS
	//--------
	
	//ConditionItemObject | Function ID | parameter 1 | parameter 2 | OPCode | float | ANDOR

	//conditions which have no parameters (eg. IsSneaking) / take in forms (GetIsRace) work
	//conditions which accept int/float/strings are skipped
	
	//Subject	| HasMagicEffectKeyword	| MagicInvisibility		| NONE | == | 0.0 | AND - in game
	//Subject 	| HasMagicEffectKeyword	| 0001EA6F ~ Skyrim.esm | NONE | == | 0.0 | AND	- in papyrus	
	
export const AddMagicEffectToSpell = (akSpell: Spell | null | undefined, akMagicEffect: MagicEffect | null | undefined, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0, asConditionList: string[]): void => sn.AddMagicEffectToSpell(akSpell,  akMagicEffect,  afMagnitude,  aiArea,  aiDuration,  afCost,  asConditionList)
	
	//Adds effectitem from spell to target spell, at given index. Same as above function, but less verbose, and preserves all conditions.
export const AddEffectItemToSpell = (akSpell: Spell | null | undefined, akSpellToCopyFrom: Spell | null | undefined, aiIndex: number, afCost: number = -1.0): void => sn.AddEffectItemToSpell(akSpell,  akSpellToCopyFrom,  aiIndex,  afCost)
	
	//Removes magic effect from spell that matches magnitude/area/duration/cost.
export const RemoveMagicEffectFromSpell = (akSpell: Spell | null | undefined, akMagicEffect: MagicEffect | null | undefined, afMagnitude: number, aiArea: number, aiDuration: number, afCost: number = 0.0): void => sn.RemoveMagicEffectFromSpell(akSpell,  akMagicEffect,  afMagnitude,  aiArea,  aiDuration,  afCost)
	
	//Removes effectitem from spell that matches spell at index.
export const RemoveEffectItemFromSpell = (akSpell: Spell | null | undefined, akSpellToMatchFrom: Spell | null | undefined, aiIndex: number): void => sn.RemoveEffectItemFromSpell(akSpell,  akSpellToMatchFrom,  aiIndex)
	
	//Sets casting type of spell (and all attached magic effects)
export const SetSpellCastingType = (akSpell: Spell | null | undefined, aiType: number): void => sn.SetSpellCastingType(akSpell,  aiType)
	
	//Sets delivery type of spell (and all attached magic effects)
export const SetSpellDeliveryType = (akSpell: Spell | null | undefined, aiType: number): void => sn.SetSpellDeliveryType(akSpell,  aiType)
			
//----------------------------------------------------------------------------------------------------------	
//STRINGS
//----------------------------------------------------------------------------------------------------------

	//Converts string to hex value if valid
export const IntToString = (aiValue: number, abHex: boolean): string => sn.IntToString(aiValue,  abHex)
	
	//Converts string to int. Returns -1 for out of bound values.
export const StringToInt = (asString: string): number => sn.StringToInt(asString)
	
//----------------------------------------------------------------------------------------------------------
//UI
//----------------------------------------------------------------------------------------------------------
	
	//Gets the objectreference of the currently opened container in container menu
export const GetMenuContainer = (): ObjectReference | null | undefined => sn.GetMenuContainer()
	
//----------------------------------------------------------------------------------------------------------
//UTILITY
//----------------------------------------------------------------------------------------------------------
	
	//Calculates a random float between afMin and afMax, based on Mersenne Twister
export const GenerateRandomFloat = (afMin: number, afMax: number): number => sn.GenerateRandomFloat(afMin,  afMax)
	
	//Calculates a random integer between afMin and afMax, based on Mersenne Twister
export const GenerateRandomInt = (afMin: number, afMax: number): number => sn.GenerateRandomInt(afMin,  afMax)
	
	//Gets system time and date
	//Year (1601 - 30827)
	//Month (1-12)
	//DayOfWeek (1:Sunday - 7:Saturday)
	//Day (1-31)
	//Hour (0-23)
	//Minute (0-59)
	//Second (0-59)
	//Millisecond (0-999)
export const GetSystemTime = (): number[] => sn.GetSystemTime()
	
//-----------------------------------------------------------------------------------------------------------
//VISUALEFFECTS
//----------------------------------------------------------------------------------------------------------		

	//--------
	//GETTERS
	//--------
	
	//Gets the art object associated with the visual effect.
export const GetArtObject = (akEffect: VisualEffect | null | undefined): Art | null | undefined => sn.GetArtObject(akEffect)
	
	//Returns the total number of art objects present/active (on objects) within the loaded area.
export const GetArtObjectTotalCount = (akEffect: VisualEffect | null | undefined, abActive: boolean): number => sn.GetArtObjectTotalCount(akEffect,  abActive)
	
	//--------
	//SETTERS
	//--------
	
	//Sets the art object associated with the visual effect.
export const SetArtObject = (akEffect: VisualEffect | null | undefined, akArt: Art | null | undefined): void => sn.SetArtObject(akEffect,  akArt)
			
//-----------------------------------------------------------------------------------------------------------
//WEATHER
//----------------------------------------------------------------------------------------------------------		

	//Gets wind speed as shown as in CK conditions (0.0-1.0).
export const GetWindSpeedAsFloat = (akWeather: Weather | null | undefined): number => sn.GetWindSpeedAsFloat(akWeather)
	
	//Gets wind speed as shown in the weather form (0-255).
export const GetWindSpeedAsInt = (akWeather: Weather | null | undefined): number => sn.GetWindSpeedAsInt(akWeather)
	
/** WEATHER TYPES
		Pleasant = 0
		Cloudy = 1
		Rainy = 2
		Snow = 3 */
	
	//Gets weather/current weather type if akWeather is None
export const GetWeatherType = (akWeather: Weather | null | undefined = null): number => sn.GetWeatherType(akWeather)
