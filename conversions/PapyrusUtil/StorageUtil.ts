/*
==============================================
Typescript definitions for v4.3
==============================================

Manually converted functions. Please test:
	- FormListFilterByType

Functions deleted because they need manual translation and are already deprecated:
	- FileSetIntValue
	- FileSetFloatValue
	- FileSetStringValue
	- FileSetFormValue
	- FileAdjustIntValue
	- FileAdjustFloatValue
	- FileUnsetIntValue
	- FileUnsetFloatValue
	- FileUnsetStringValue
	- FileUnsetFormValue
	- FileHasIntValue
	- FileHasFloatValue
	- FileHasStringValue
	- FileHasFormValue
	- FileGetIntValue
	- FileGetFloatValue
	- FileGetStringValue
	- FileGetFormValue
	- FileIntListAdd
	- FileFloatListAdd
	- FileStringListAdd
	- FileFormListAdd
	- FileIntListAdjust
	- FileFloatListAdjust
	- FileIntListRemove
	- FileFloatListRemove
	- FileStringListRemove
	- FileFormListRemove
	- FileIntListGet
	- FileFloatListGet
	- FileStringListGet
	- FileFormListGet
	- FileIntListSet
	- FileFloatListSet
	- FileStringListSet
	- FileFormListSet
	- FileIntListClear
	- FileFloatListClear
	- FileStringListClear
	- FileFormListClear
	- FileIntListRemoveAt
	- FileFloatListRemoveAt
	- FileStringListRemoveAt
	- FileFormListRemoveAt
	- FileIntListInsert
	- FileFloatListInsert
	- FileStringListInsert
	- FileFormListInsert
	- FileIntListCount
	- FileFloatListCount
	- FileStringListCount
	- FileFormListCount
	- FileIntListFind
	- FileFloatListFind
	- FileStringListFind
	- FileFormListFind
	- FileIntListHas
	- FileFloatListHas
	- FileStringListHas
	- FileFormListHas
	- FileIntListSlice
	- FileFloatListSlice
	- FileStringListSlice
	- FileFormListSlice
	- FileIntListResize
	- FileFloatListResize
	- FileStringListResize
	- FileFormListResize
	- FileIntListCopy
	- FileFloatListCopy
	- FileStringListCopy
	- FileFormListCopy
	- debug_SaveFile
	- debug_FileGetIntKeysCount
	- debug_FileGetFloatKeysCount
	- debug_FileGetStringKeysCount
	- debug_FileGetIntListKeysCount
	- debug_FileGetFloatListKeysCount
	- debug_FileGetStringListKeysCount
	- debug_FileGetIntKey
	- debug_FileGetFloatKey
	- debug_FileGetStringKey
	- debug_FileGetIntListKey
	- debug_FileGetFloatListKey
	- debug_FileGetStringListKey
	- debug_FileDeleteAllValues
	- debug_SetDebugMode
	- ImportFile
	- ExportFile

***********************************************************************
 
This file was automatically generated by Papyrus-2-Typescript.exe
https://github.com/CarlosLeyvaAyala/Papyrus-2-Typescript

The program has no way to know the intention of the humans that made
the scripts, so it's always advisable to manually check all generated
files to make sure everything is declared as it should.
*/

import * as sp from "skyrimPlatform"

import { Form } from "skyrimPlatform"

const sn = (sp as any).StorageUtil

/** MOD AUTHORS, READ!
* 
* 	This script contains functions for saving and loading any amount of int, float, form and string values
* 	by name on a form or globally. These values can be accessed and changed from any mod which allows
* 	mods to become compatible with each other without adding any requirements to the other mod or its version
* 	other than this plugin.
* 
* 	Values will stay on forms or globally until they are Unset or Cleared in case of lists. If value
* 	is set on a form and the object is deleted then THE value will be removed when saving game.
* 	If you are done with using a certain variable you should use Unset or Clear function to remove them
* 	but it is not required.
* 
* 	Saving MCM config values here would allow other mods to change your mod settings which may
* 	be useful. It should also allow you to change MCM config script without worrying about versioning
* 	since there are no new variables in the script itself.
* 
* 	Functions that start with File in the name will save values to a separate file, so that you can
* 	access the same values from all savegames. This may be useful for configuration settings.
*    (FILE FUNCTIONS ARE DEPRECATED! USE JSONUTIL.PSC INSTEAD)
* 
* 	Saved values take very little memory - expect to use less than 500 KB of physical memory even when
* 	setting thousands of values.
* 
* 	Value names are not case sensitive, that means GetIntValue(none, "abc") == GetIntValue(none, "aBC").
* 
* 	All values are separated from each other by type! That means SetIntValue(none, "abc", 1) and
* 	SetFloatValue(none, "abc", 2.0) create separate entries and aren't affected by each other.
* 	StorageUtil.SetIntValue(none, "myValue", 1)
* 	StorageUtil.SetFloatValue(none, "myValue", 5.0)
* 	int value = StorageUtil.GetIntValue(none, "myValue")
* 	value == 1 ; true
* 	value == 5 ; false
* 
* 	When choosing names for variables try to remember that all mods access the same storage, so if you
* 	create a variable with name "Name" then many other mods could use the same variable but in different
* 	ways that lead to unwanted behavior. It is recommended to prefix the variable with your mod name,
* 	that way you can be sure nobody else will try to use the same variable in their mod. For example
* 	realistic needs and diseases might set hunger as "rnd_hungervalue".
* 
* 	You can also use this storage to make your mod functions available to other mods, for example if
* 	your mod has a function that sets an Actor to be invisible you could add a script that checks:
* 	int i = StorageUtil.FormListCount(none, "MakeInvisible")
* 	while(i > 0)
* 		i--
* 		Actor make = StorageUtil.FormListGet(none, "MakeInvisible", i) as Actor
* 		if(make)
* 			MyScriptFunction(make)
* 		endif
* 		StorageUtil.FormListRemoveAt(none, "MakeInvisible", i)
* 	endwhile
* 	And the other mod could write:
* 	StorageUtil.FormListAdd(none, "MakeInvisible", myActor)
* 	to make someone invisible using your mod. But if your mod isn't present then nothing happens.
* 	This is just an example, I'm sure you can find better ways to implement compatibility, it would
* 	help to include a documentation for other modders if you do.
* ;/
* 
* 
* 
* 
* 
* ;/
* 	Storage functions - values in save game file.
*/

/** Set int/float/string/Form value globally or on any form by name and return
*    the value passed, or as uninitialized variable if invalid keys given.
* 
*    ObjKey: form to save on. Set none to save globally.
*    KeyName: name of value.
*    value: value to set to the given keys. If zero, empty, or none are given, the key will be unset.
*/
export const SetIntValue = (ObjKey: Form | null, KeyName: string, value: number): number => sn.SetIntValue(ObjKey, KeyName, value)
export const SetFloatValue = (ObjKey: Form | null, KeyName: string, value: number): number => sn.SetFloatValue(ObjKey, KeyName, value)
export const SetStringValue = (ObjKey: Form | null, KeyName: string, value: string): string => sn.SetStringValue(ObjKey, KeyName, value)
export const SetFormValue = (ObjKey: Form | null, KeyName: string, value: Form | null): Form | null => sn.SetFormValue(ObjKey, KeyName, value)

/** Remove a previously set int/float/string/Form value on an form or globally and
*    return if successful. This will return false if value didn't exist.
* 
*    ObjKey: form to remove from. Set none to remove global value.
*    KeyName: name of value.
*/
export const UnsetIntValue = (ObjKey: Form | null, KeyName: string): boolean => sn.UnsetIntValue(ObjKey, KeyName)
export const UnsetFloatValue = (ObjKey: Form | null, KeyName: string): boolean => sn.UnsetFloatValue(ObjKey, KeyName)
export const UnsetStringValue = (ObjKey: Form | null, KeyName: string): boolean => sn.UnsetStringValue(ObjKey, KeyName)
export const UnsetFormValue = (ObjKey: Form | null, KeyName: string): boolean => sn.UnsetFormValue(ObjKey, KeyName)

/** Check if int/float/string/Form value has been set on form or globally.
* 
*    ObjKey: form to check on. Set none to check global value.
*    KeyName: name of value.
*/
export const HasIntValue = (ObjKey: Form | null, KeyName: string): boolean => sn.HasIntValue(ObjKey, KeyName)
export const HasFloatValue = (ObjKey: Form | null, KeyName: string): boolean => sn.HasFloatValue(ObjKey, KeyName)
export const HasStringValue = (ObjKey: Form | null, KeyName: string): boolean => sn.HasStringValue(ObjKey, KeyName)
export const HasFormValue = (ObjKey: Form | null, KeyName: string): boolean => sn.HasFormValue(ObjKey, KeyName)

/** Get previously saved int/float/string/Form value on form or globally.
* 
*    ObjKey: form to get from. Set none to get global value.
*    KeyName: name of value.
*    [optional] missing: if value has not been set, return this value instead.
*/
export const GetIntValue = (ObjKey: Form | null, KeyName: string, missing: number = 0): number => sn.GetIntValue(ObjKey, KeyName, missing)
export const GetFloatValue = (ObjKey: Form | null, KeyName: string, missing: number = 0.0): number => sn.GetFloatValue(ObjKey, KeyName, missing)
export const GetStringValue = (ObjKey: Form | null, KeyName: string, missing: string = ""): string => sn.GetStringValue(ObjKey, KeyName, missing)
export const GetFormValue = (ObjKey: Form | null, KeyName: string, missing: Form | null = null): Form | null => sn.GetFormValue(ObjKey, KeyName, missing)

/** Plucks a previously saved int/float/string/Form value on form or globally.
*    Returning the value stored, then removing it from storage.
* 
*    ObjKey: form to pluck from. Set none to get global value.
*    KeyName: name of value.
*    [optional] missing: if value has not been set, return this value instead.
*/
export const PluckIntValue = (ObjKey: Form | null, KeyName: string, missing: number = 0): number => sn.PluckIntValue(ObjKey, KeyName, missing)
export const PluckFloatValue = (ObjKey: Form | null, KeyName: string, missing: number = 0.0): number => sn.PluckFloatValue(ObjKey, KeyName, missing)
export const PluckStringValue = (ObjKey: Form | null, KeyName: string, missing: string = ""): string => sn.PluckStringValue(ObjKey, KeyName, missing)
export const PluckFormValue = (ObjKey: Form | null, KeyName: string, missing: Form | null = null): Form | null => sn.PluckFormValue(ObjKey, KeyName, missing)

/** Get previously saved int/float/string/Form value on form or globally.
* 
*    ObjKey: form to get from. Set none to get global value.
*    KeyName: name of value.
*    amount: +/- the amount to adjust the current value by
* 
*    given keys will be initialized to given amount if it does not exist
*/
export const AdjustIntValue = (ObjKey: Form | null, KeyName: string, amount: number): number => sn.AdjustIntValue(ObjKey, KeyName, amount)
export const AdjustFloatValue = (ObjKey: Form | null, KeyName: string, amount: number): number => sn.AdjustFloatValue(ObjKey, KeyName, amount)

/** Add an int/float/string/Form to a list on form or globally and return
*    the value's new index. Index can be -1 if we were unable to add
*    the value.
* 
*    ObjKey: form to add to. Set none to add global value.
*    KeyName: name of value.
*    value: value to add.
*    [optional] allowDuplicate: allow adding value to list if this value already exists in the list.
*/
export const IntListAdd = (ObjKey: Form | null, KeyName: string, value: number, allowDuplicate: boolean = true): number => sn.IntListAdd(ObjKey, KeyName, value, allowDuplicate)
export const FloatListAdd = (ObjKey: Form | null, KeyName: string, value: number, allowDuplicate: boolean = true): number => sn.FloatListAdd(ObjKey, KeyName, value, allowDuplicate)
export const StringListAdd = (ObjKey: Form | null, KeyName: string, value: string, allowDuplicate: boolean = true): number => sn.StringListAdd(ObjKey, KeyName, value, allowDuplicate)
export const FormListAdd = (ObjKey: Form | null, KeyName: string, value: Form | null, allowDuplicate: boolean = true): number => sn.FormListAdd(ObjKey, KeyName, value, allowDuplicate)

/** Get a value from list by index on form or globally.
*    This will return 0 as value if there was a problem.
* 
*    ObjKey: form to get value on. Set none to get global list value.
*    KeyName: name of list.
*    index: index of value in the list.
*/
export const IntListGet = (ObjKey: Form | null, KeyName: string, index: number): number => sn.IntListGet(ObjKey, KeyName, index)
export const FloatListGet = (ObjKey: Form | null, KeyName: string, index: number): number => sn.FloatListGet(ObjKey, KeyName, index)
export const StringListGet = (ObjKey: Form | null, KeyName: string, index: number): string => sn.StringListGet(ObjKey, KeyName, index)
export const FormListGet = (ObjKey: Form | null, KeyName: string, index: number): Form | null => sn.FormListGet(ObjKey, KeyName, index)

/** Set a value in list by index on form or globally.
*    This will return the previous value or 0 if there was a problem.
* 
*    ObjKey: form to set value on. Set none to set global list value.
*    KeyName: name of list.
*    index: index of value in the list.
*    value: value to set to.
*/
export const IntListSet = (ObjKey: Form | null, KeyName: string, index: number, value: number): number => sn.IntListSet(ObjKey, KeyName, index, value)
export const FloatListSet = (ObjKey: Form | null, KeyName: string, index: number, value: number): number => sn.FloatListSet(ObjKey, KeyName, index, value)
export const StringListSet = (ObjKey: Form | null, KeyName: string, index: number, value: string): string => sn.StringListSet(ObjKey, KeyName, index, value)
export const FormListSet = (ObjKey: Form | null, KeyName: string, index: number, value: Form | null): Form | null => sn.FormListSet(ObjKey, KeyName, index, value)

/** Plucks a value from list by index on form or globally.
*    The index is removed from the list's storage after returning it's value.
* 
*    ObjKey: form to pluck value from. Set none to get global list value.
*    KeyName: name of list.
*    index: index of value in the list.
*    [optional] missing: if index has not been set, return this value instead.
*/
export const IntListPluck = (ObjKey: Form | null, KeyName: string, index: number, missing: number): number => sn.IntListPluck(ObjKey, KeyName, index, missing)
export const FloatListPluck = (ObjKey: Form | null, KeyName: string, index: number, missing: number): number => sn.FloatListPluck(ObjKey, KeyName, index, missing)
export const StringListPluck = (ObjKey: Form | null, KeyName: string, index: number, missing: string): string => sn.StringListPluck(ObjKey, KeyName, index, missing)
export const FormListPluck = (ObjKey: Form | null, KeyName: string, index: number, missing: Form | null): Form | null => sn.FormListPluck(ObjKey, KeyName, index, missing)

/** Gets the value of the very first element in a list, and subsequently removes the index afterward.
* 
*    ObjKey: form to shift value from. Set none to get global list value.
*    KeyName: name of list to shift it's first value from.
*/
export const IntListShift = (ObjKey: Form | null, KeyName: string): number => sn.IntListShift(ObjKey, KeyName)
export const FloatListShift = (ObjKey: Form | null, KeyName: string): number => sn.FloatListShift(ObjKey, KeyName)
export const StringListShift = (ObjKey: Form | null, KeyName: string): string => sn.StringListShift(ObjKey, KeyName)
export const FormListShift = (ObjKey: Form | null, KeyName: string): Form | null => sn.FormListShift(ObjKey, KeyName)

/** Gets the value of the very last element in a list, and subsequently removes the index afterward.
* 
*    ObjKey: form to pop value from. Set none to get global list value.
*    KeyName: name of list to pop off it's last value.
*/
export const IntListPop = (ObjKey: Form | null, KeyName: string): number => sn.IntListPop(ObjKey, KeyName)
export const FloatListPop = (ObjKey: Form | null, KeyName: string): number => sn.FloatListPop(ObjKey, KeyName)
export const StringListPop = (ObjKey: Form | null, KeyName: string): string => sn.StringListPop(ObjKey, KeyName)
export const FormListPop = (ObjKey: Form | null, KeyName: string): Form | null => sn.FormListPop(ObjKey, KeyName)

/** Adjust the existing value of a list by the given amount.
* 
*    ObjKey: form to set value on. Set none to set global list value.
*    KeyName: name of list.
*    index: index of value in the list.
*    amount: +/- the amount to adjust the lists current index value by.
* 
*    returns 0 if index does not exists
*/
export const IntListAdjust = (ObjKey: Form | null, KeyName: string, index: number, amount: number): number => sn.IntListAdjust(ObjKey, KeyName, index, amount)
export const FloatListAdjust = (ObjKey: Form | null, KeyName: string, index: number, amount: number): number => sn.FloatListAdjust(ObjKey, KeyName, index, amount)

/** Insert an int/float/string/Form to a list on form or globally and return
*    if successful.
* 
*    ObjKey: form to add to. Set none to add global value.
*    KeyName: name of value.
*    index: position in list to put the value. 0 is first entry in list.
*    value: value to add.
*/
export const IntListInsert = (ObjKey: Form | null, KeyName: string, index: number, value: number): boolean => sn.IntListInsert(ObjKey, KeyName, index, value)
export const FloatListInsert = (ObjKey: Form | null, KeyName: string, index: number, value: number): boolean => sn.FloatListInsert(ObjKey, KeyName, index, value)
export const StringListInsert = (ObjKey: Form | null, KeyName: string, index: number, value: string): boolean => sn.StringListInsert(ObjKey, KeyName, index, value)
export const FormListInsert = (ObjKey: Form | null, KeyName: string, index: number, value: Form | null): boolean => sn.FormListInsert(ObjKey, KeyName, index, value)

/** Remove a previously added int/float/string/Form value from a list on form
*    or globally and return how many instances of this value were removed.
* 
*    ObjKey: form to remove from. Set none to remove global value.
*    KeyName: name of value.
*    value: value to remove.
*    [optional] allowInstances: remove all instances of this value in a list.
*/
export const IntListRemove = (ObjKey: Form | null, KeyName: string, value: number, allInstances: boolean = false): number => sn.IntListRemove(ObjKey, KeyName, value, allInstances)
export const FloatListRemove = (ObjKey: Form | null, KeyName: string, value: number, allInstances: boolean = false): number => sn.FloatListRemove(ObjKey, KeyName, value, allInstances)
export const StringListRemove = (ObjKey: Form | null, KeyName: string, value: string, allInstances: boolean = false): number => sn.StringListRemove(ObjKey, KeyName, value, allInstances)
export const FormListRemove = (ObjKey: Form | null, KeyName: string, value: Form | null, allInstances: boolean = false): number => sn.FormListRemove(ObjKey, KeyName, value, allInstances)

/** Clear a list of values (unset) on an form or globally and
*    return the previous size of list.
* 
*    ObjKey: form to clear on. Set none to clear global list.
*    KeyName: name of list.
*/
export const IntListClear = (ObjKey: Form | null, KeyName: string): number => sn.IntListClear(ObjKey, KeyName)
export const FloatListClear = (ObjKey: Form | null, KeyName: string): number => sn.FloatListClear(ObjKey, KeyName)
export const StringListClear = (ObjKey: Form | null, KeyName: string): number => sn.StringListClear(ObjKey, KeyName)
export const FormListClear = (ObjKey: Form | null, KeyName: string): number => sn.FormListClear(ObjKey, KeyName)

/** Remove a value from list by index on form or globally and
*    return if we were successful in doing so.
* 
*    ObjKey: form to remove from. Set none to remove global value.
*    KeyName: name of list.
*    index: index of value in the list.
*/
export const IntListRemoveAt = (ObjKey: Form | null, KeyName: string, index: number): boolean => sn.IntListRemoveAt(ObjKey, KeyName, index)
export const FloatListRemoveAt = (ObjKey: Form | null, KeyName: string, index: number): boolean => sn.FloatListRemoveAt(ObjKey, KeyName, index)
export const StringListRemoveAt = (ObjKey: Form | null, KeyName: string, index: number): boolean => sn.StringListRemoveAt(ObjKey, KeyName, index)
export const FormListRemoveAt = (ObjKey: Form | null, KeyName: string, index: number): boolean => sn.FormListRemoveAt(ObjKey, KeyName, index)

/** Get size of a list on form or globally.
* 
*    ObjKey: form to check on. Set none to check global list.
*    KeyName: name of list.
*/
export const IntListCount = (ObjKey: Form | null, KeyName: string): number => sn.IntListCount(ObjKey, KeyName)
export const FloatListCount = (ObjKey: Form | null, KeyName: string): number => sn.FloatListCount(ObjKey, KeyName)
export const StringListCount = (ObjKey: Form | null, KeyName: string): number => sn.StringListCount(ObjKey, KeyName)
export const FormListCount = (ObjKey: Form | null, KeyName: string): number => sn.FormListCount(ObjKey, KeyName)

/** Get the number of occurrences of a specific value within a list.
* 
*    ObjKey: form to check on. Set none to check global list.
*    KeyName: name of list.
*    value: value to look for.
*    [optional] exclude: if true, function will return number of elements NOT equal to value.
*/
export const IntListCountValue = (ObjKey: Form | null, KeyName: string, value: number, exclude: boolean = false): number => sn.IntListCountValue(ObjKey, KeyName, value, exclude)
export const FloatListCountValue = (ObjKey: Form | null, KeyName: string, value: number, exclude: boolean = false): number => sn.FloatListCountValue(ObjKey, KeyName, value, exclude)
export const StringListCountValue = (ObjKey: Form | null, KeyName: string, value: string, exclude: boolean = false): number => sn.StringListCountValue(ObjKey, KeyName, value, exclude)
export const FormListCountValue = (ObjKey: Form | null, KeyName: string, value: Form | null, exclude: boolean = false): number => sn.FormListCountValue(ObjKey, KeyName, value, exclude)

/** Find a value in list on form or globally and return its
*    index or -1 if value was not found.
* 
*    ObjKey: form to find value on. Set none to find global list value.
*    KeyName: name of list.
*    value: value to search.
*/
export const IntListFind = (ObjKey: Form | null, KeyName: string, value: number): number => sn.IntListFind(ObjKey, KeyName, value)
export const FloatListFind = (ObjKey: Form | null, KeyName: string, value: number): number => sn.FloatListFind(ObjKey, KeyName, value)
export const StringListFind = (ObjKey: Form | null, KeyName: string, value: string): number => sn.StringListFind(ObjKey, KeyName, value)
export const FormListFind = (ObjKey: Form | null, KeyName: string, value: Form | null): number => sn.FormListFind(ObjKey, KeyName, value)

/** Find if a value in list on form or globally exists, true if it exists,
*    false if it doesn't.
* 
*    ObjKey: form to find value on. Set none to find global list value.
*    KeyName: name of list.
*    value: value to search.
*/
export const IntListHas = (ObjKey: Form | null, KeyName: string, value: number): boolean => sn.IntListHas(ObjKey, KeyName, value)
export const FloatListHas = (ObjKey: Form | null, KeyName: string, value: number): boolean => sn.FloatListHas(ObjKey, KeyName, value)
export const StringListHas = (ObjKey: Form | null, KeyName: string, value: string): boolean => sn.StringListHas(ObjKey, KeyName, value)
export const FormListHas = (ObjKey: Form | null, KeyName: string, value: Form | null): boolean => sn.FormListHas(ObjKey, KeyName, value)

/** Sort an int/float/string/Form list by values in ascending order.
* 
*    ObjKey: form to sort on. Set none for global value.
*    KeyName: name of value.
*/
export const IntListSort = (ObjKey: Form | null, KeyName: string): void => sn.IntListSort(ObjKey, KeyName)
export const FloatListSort = (ObjKey: Form | null, KeyName: string): void => sn.FloatListSort(ObjKey, KeyName)
export const StringListSort = (ObjKey: Form | null, KeyName: string): void => sn.StringListSort(ObjKey, KeyName)
export const FormListSort = (ObjKey: Form | null, KeyName: string): void => sn.FormListSort(ObjKey, KeyName)

/** Fills the given input array with the values of the list on form or globally,
*    will fill the array until either the array or list runs out of valid indexes
* 
*    ObjKey: form to find value on. Set none to find global list value.
*    KeyName: name of list.
*    slice[]: an initialized array set to the slice size you want, i.e. int[] slice = new int[10]
*    [optional] startIndex: the starting list index you want to start filling your slice array with
*/
export const IntListSlice = (ObjKey: Form | null, KeyName: string, slice: number[], startIndex: number = 0): void => sn.IntListSlice(ObjKey, KeyName, slice, startIndex)
export const FloatListSlice = (ObjKey: Form | null, KeyName: string, slice: number[], startIndex: number = 0): void => sn.FloatListSlice(ObjKey, KeyName, slice, startIndex)
export const StringListSlice = (ObjKey: Form | null, KeyName: string, slice: string[], startIndex: number = 0): void => sn.StringListSlice(ObjKey, KeyName, slice, startIndex)
export const FormListSlice = (ObjKey: Form | null, KeyName: string, slice: (Form | null)[] | null, startIndex: number = 0): void => sn.FormListSlice(ObjKey, KeyName, slice, startIndex)

/** Sizes the given list to a set number of elements. If the list exists already it will be truncated
*    when given fewer elements, or resized to the appropriate length with the filler argument being used as
*    the default values
* 
*    Returns the number of elements truncated (signed) or added (unsigned) onto the list.
* 
*    ObjKey: form to find value on. Set none to find global list value.
*    KeyName: name of list.
*    toLength: The size you want to change the list to. Max length when using this function is 500.
*    [optional] filler: When adding empty elements to the list this will be used as the default value
*/
export const IntListResize = (ObjKey: Form | null, KeyName: string, toLength: number, filler: number = 0): number => sn.IntListResize(ObjKey, KeyName, toLength, filler)
export const FloatListResize = (ObjKey: Form | null, KeyName: string, toLength: number, filler: number = 0.0): number => sn.FloatListResize(ObjKey, KeyName, toLength, filler)
export const StringListResize = (ObjKey: Form | null, KeyName: string, toLength: number, filler: string = ""): number => sn.StringListResize(ObjKey, KeyName, toLength, filler)
export const FormListResize = (ObjKey: Form | null, KeyName: string, toLength: number, filler: Form | null = null): number => sn.FormListResize(ObjKey, KeyName, toLength, filler)

/** Creates a copy of array on the given storage list at the given object+key,
*    overwriting any list that might already exists.
* 
*    Returns true on success.
* 
*    ObjKey: form to find value on. Set none to find global list value.
*    KeyName: name of list.
*    copy[]: The papyrus array with the content you wish to copy over into StorageUtil
*    [optional] filler: When adding empty elements to the list this will be used as the default value
*/
export const IntListCopy = (ObjKey: Form | null, KeyName: string, copy: number[]): boolean => sn.IntListCopy(ObjKey, KeyName, copy)
export const FloatListCopy = (ObjKey: Form | null, KeyName: string, copy: number[]): boolean => sn.FloatListCopy(ObjKey, KeyName, copy)
export const StringListCopy = (ObjKey: Form | null, KeyName: string, copy: string[]): boolean => sn.StringListCopy(ObjKey, KeyName, copy)
export const FormListCopy = (ObjKey: Form | null, KeyName: string, copy: (Form | null)[] | null): boolean => sn.FormListCopy(ObjKey, KeyName, copy)

/** Outputs the values currently stored by the given object+key.
* 
*    Returns a new array containing the values.
* 
*    ObjKey: form to find value on. Set none to find global list value.
*    KeyName: name of list.
*/
export const IntListToArray = (ObjKey: Form | null, KeyName: string): number[] => sn.IntListToArray(ObjKey, KeyName)
export const FloatListToArray = (ObjKey: Form | null, KeyName: string): number[] => sn.FloatListToArray(ObjKey, KeyName)
export const StringListToArray = (ObjKey: Form | null, KeyName: string): string[] => sn.StringListToArray(ObjKey, KeyName)
export const FormListToArray = (ObjKey: Form | null, KeyName: string): (Form | null)[] => sn.FormListToArray(ObjKey, KeyName)

/** Returns array of forms from list that have (or optionally don't have) the specified form types.
*    For valid list of form types, see FormType.psc or http://www.creationkit.com/GetType_-_Form
* 
*    ObjKey: form to find value on. Set none to find global list value.
*    KeyName: name of list.
*    FormTypeIDs[]: The int papyrus array with all the form types you wish to filter for
*    [optional] ReturnMatching: By default, TRUE, the output Form[] array will contain forms from list that match the form types
*                               If set to FALSE, inverts the resulting array with forms that have a type that DO NOT match.
*/
export const FormListFilterByTypes = (ObjKey: Form | null, KeyName: string, FormTypeIDs: number[], ReturnMatching: boolean = true): (Form | null)[] => sn.FormListFilterByTypes(ObjKey, KeyName, FormTypeIDs, ReturnMatching)
/** Convenience version of FormListFilterByTypes() for when only getting a single type. */
export const FormListFilterByType = (ObjKey: Form | null, KeyName: string, FormTypeID: number, ReturnMatching: boolean = true): (Form | null)[] => FormListFilterByTypes(ObjKey, KeyName, [FormTypeID], ReturnMatching)

/** Counts each type of of any KeyName that starts with a given string prefix on all objects.
* 
*    PrefixKey: The string a KeyName must start with to be counted. Cannot be empty.
*/
export const CountIntValuePrefix = (PrefixKey: string): number => sn.CountIntValuePrefix(PrefixKey)
export const CountFloatValuePrefix = (PrefixKey: string): number => sn.CountFloatValuePrefix(PrefixKey)
export const CountStringValuePrefix = (PrefixKey: string): number => sn.CountStringValuePrefix(PrefixKey)
export const CountFormValuePrefix = (PrefixKey: string): number => sn.CountFormValuePrefix(PrefixKey)

export const CountIntListPrefix = (PrefixKey: string): number => sn.CountIntListPrefix(PrefixKey)
export const CountFloatListPrefix = (PrefixKey: string): number => sn.CountFloatListPrefix(PrefixKey)
export const CountStringListPrefix = (PrefixKey: string): number => sn.CountStringListPrefix(PrefixKey)
export const CountFormListPrefix = (PrefixKey: string): number => sn.CountFormListPrefix(PrefixKey)

/** Performs all of the above prefix counts in one go. */
export const CountAllPrefix = (PrefixKey: string): number => sn.CountAllPrefix(PrefixKey)

/** Counts each type of of any KeyName that starts with a given string prefix on all objects.
* 
*    ObjKey: form to perform the prefix count on.
*    PrefixKey: The string a KeyName must start with to be counted. Cannot be empty.
*/
export const CountObjIntValuePrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.CountObjIntValuePrefix(ObjKey, PrefixKey)
export const CountObjFloatValuePrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.CountObjFloatValuePrefix(ObjKey, PrefixKey)
export const CountObjStringValuePrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.CountObjStringValuePrefix(ObjKey, PrefixKey)
export const CountObjFormValuePrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.CountObjFormValuePrefix(ObjKey, PrefixKey)

export const CountObjIntListPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.CountObjIntListPrefix(ObjKey, PrefixKey)
export const CountObjFloatListPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.CountObjFloatListPrefix(ObjKey, PrefixKey)
export const CountObjStringListPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.CountObjStringListPrefix(ObjKey, PrefixKey)
export const CountObjFormListPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.CountObjFormListPrefix(ObjKey, PrefixKey)

/** Performs all of the above prefix counts in one go. */
export const CountAllObjPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.CountAllObjPrefix(ObjKey, PrefixKey)

/** Clears each type of of any KeyName that starts with a given string prefix on all objects.
*    Returns the number of values/lists that were unset.
* 
*    PrefixKey: The string a KeyName must start with to be cleared. Cannot be empty.
*/
export const ClearIntValuePrefix = (PrefixKey: string): number => sn.ClearIntValuePrefix(PrefixKey)
export const ClearFloatValuePrefix = (PrefixKey: string): number => sn.ClearFloatValuePrefix(PrefixKey)
export const ClearStringValuePrefix = (PrefixKey: string): number => sn.ClearStringValuePrefix(PrefixKey)
export const ClearFormValuePrefix = (PrefixKey: string): number => sn.ClearFormValuePrefix(PrefixKey)

export const ClearIntListPrefix = (PrefixKey: string): number => sn.ClearIntListPrefix(PrefixKey)
export const ClearFloatListPrefix = (PrefixKey: string): number => sn.ClearFloatListPrefix(PrefixKey)
export const ClearStringListPrefix = (PrefixKey: string): number => sn.ClearStringListPrefix(PrefixKey)
export const ClearFormListPrefix = (PrefixKey: string): number => sn.ClearFormListPrefix(PrefixKey)

/** Performs all of the above prefix clears in one go. */
export const ClearAllPrefix = (PrefixKey: string): number => sn.ClearAllPrefix(PrefixKey)

/** Clears each type of of any KeyName that starts with a given string prefix on specific objects.
*    Returns the number of values/lists that were unset.
* 
*    ObjKey: form to perform the prefix clear on.
*    PrefixKey: The string a KeyName must start with to be cleared. Cannot be empty.
*/
export const ClearObjIntValuePrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.ClearObjIntValuePrefix(ObjKey, PrefixKey)
export const ClearObjFloatValuePrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.ClearObjFloatValuePrefix(ObjKey, PrefixKey)
export const ClearObjStringValuePrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.ClearObjStringValuePrefix(ObjKey, PrefixKey)
export const ClearObjFormValuePrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.ClearObjFormValuePrefix(ObjKey, PrefixKey)

export const ClearObjIntListPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.ClearObjIntListPrefix(ObjKey, PrefixKey)
export const ClearObjFloatListPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.ClearObjFloatListPrefix(ObjKey, PrefixKey)
export const ClearObjStringListPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.ClearObjStringListPrefix(ObjKey, PrefixKey)
export const ClearObjFormListPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.ClearObjFormListPrefix(ObjKey, PrefixKey)

/** Performs all of the above prefix clears in one go. */
export const ClearAllObjPrefix = (ObjKey: Form | null, PrefixKey: string): number => sn.ClearAllObjPrefix(ObjKey, PrefixKey)

/** Debug functions - can be helpful to find problems or for development.
*/

export const debug_DeleteValues = (ObjKey: Form | null): void => sn.debug_DeleteValues(ObjKey)
export const debug_DeleteAllValues = (): void => sn.debug_DeleteAllValues()

export const debug_Cleanup = (): number => sn.debug_Cleanup()

export const debug_AllIntObjs = (): (Form | null)[] => sn.debug_AllIntObjs()
export const debug_AllFloatObjs = (): (Form | null)[] => sn.debug_AllFloatObjs()
export const debug_AllStringObjs = (): (Form | null)[] => sn.debug_AllStringObjs()
export const debug_AllFormObjs = (): (Form | null)[] => sn.debug_AllFormObjs()
export const debug_AllIntListObjs = (): (Form | null)[] => sn.debug_AllIntListObjs()
export const debug_AllFloatListObjs = (): (Form | null)[] => sn.debug_AllFloatListObjs()
export const debug_AllStringListObjs = (): (Form | null)[] => sn.debug_AllStringListObjs()
export const debug_AllFormListObjs = (): (Form | null)[] => sn.debug_AllFormListObjs()

export const debug_AllObjIntKeys = (ObjKey: Form | null): string[] => sn.debug_AllObjIntKeys(ObjKey)
export const debug_AllObjFloatKeys = (ObjKey: Form | null): string[] => sn.debug_AllObjFloatKeys(ObjKey)
export const debug_AllObjStringKeys = (ObjKey: Form | null): string[] => sn.debug_AllObjStringKeys(ObjKey)
export const debug_AllObjFormKeys = (ObjKey: Form | null): string[] => sn.debug_AllObjFormKeys(ObjKey)
export const debug_AllObjIntListKeys = (ObjKey: Form | null): string[] => sn.debug_AllObjIntListKeys(ObjKey)
export const debug_AllObjFloatListKeys = (ObjKey: Form | null): string[] => sn.debug_AllObjFloatListKeys(ObjKey)
export const debug_AllObjStringListKeys = (ObjKey: Form | null): string[] => sn.debug_AllObjStringListKeys(ObjKey)
export const debug_AllObjFormListKeys = (ObjKey: Form | null): string[] => sn.debug_AllObjFormListKeys(ObjKey)

export const debug_GetIntObjectCount = (): number => sn.debug_GetIntObjectCount()
export const debug_GetFloatObjectCount = (): number => sn.debug_GetFloatObjectCount()
export const debug_GetStringObjectCount = (): number => sn.debug_GetStringObjectCount()
export const debug_GetFormObjectCount = (): number => sn.debug_GetFormObjectCount()
export const debug_GetIntListObjectCount = (): number => sn.debug_GetIntListObjectCount()
export const debug_GetFloatListObjectCount = (): number => sn.debug_GetFloatListObjectCount()
export const debug_GetStringListObjectCount = (): number => sn.debug_GetStringListObjectCount()
export const debug_GetFormListObjectCount = (): number => sn.debug_GetFormListObjectCount()

export const debug_GetIntObject = (index: number): Form | null => sn.debug_GetIntObject(index)
export const debug_GetFloatObject = (index: number): Form | null => sn.debug_GetFloatObject(index)
export const debug_GetStringObject = (index: number): Form | null => sn.debug_GetStringObject(index)
export const debug_GetFormObject = (index: number): Form | null => sn.debug_GetFormObject(index)
export const debug_GetIntListObject = (index: number): Form | null => sn.debug_GetIntListObject(index)
export const debug_GetFloatListObject = (index: number): Form | null => sn.debug_GetFloatListObject(index)
export const debug_GetStringListObject = (index: number): Form | null => sn.debug_GetStringListObject(index)
export const debug_GetFormListObject = (index: number): Form | null => sn.debug_GetFormListObject(index)
   
export const debug_GetIntKeysCount = (ObjKey: Form | null): number => sn.debug_GetIntKeysCount(ObjKey)
export const debug_GetFloatKeysCount = (ObjKey: Form | null): number => sn.debug_GetFloatKeysCount(ObjKey)
export const debug_GetStringKeysCount = (ObjKey: Form | null): number => sn.debug_GetStringKeysCount(ObjKey)
export const debug_GetFormKeysCount = (ObjKey: Form | null): number => sn.debug_GetFormKeysCount(ObjKey)
export const debug_GetIntListKeysCount = (ObjKey: Form | null): number => sn.debug_GetIntListKeysCount(ObjKey)
export const debug_GetFloatListKeysCount = (ObjKey: Form | null): number => sn.debug_GetFloatListKeysCount(ObjKey)
export const debug_GetStringListKeysCount = (ObjKey: Form | null): number => sn.debug_GetStringListKeysCount(ObjKey)
export const debug_GetFormListKeysCount = (ObjKey: Form | null): number => sn.debug_GetFormListKeysCount(ObjKey)

export const debug_GetIntKey = (ObjKey: Form | null, index: number): string => sn.debug_GetIntKey(ObjKey, index)
export const debug_GetFloatKey = (ObjKey: Form | null, index: number): string => sn.debug_GetFloatKey(ObjKey, index)
export const debug_GetStringKey = (ObjKey: Form | null, index: number): string => sn.debug_GetStringKey(ObjKey, index)
export const debug_GetFormKey = (ObjKey: Form | null, index: number): string => sn.debug_GetFormKey(ObjKey, index)
export const debug_GetIntListKey = (ObjKey: Form | null, index: number): string => sn.debug_GetIntListKey(ObjKey, index)
export const debug_GetFloatListKey = (ObjKey: Form | null, index: number): string => sn.debug_GetFloatListKey(ObjKey, index)
export const debug_GetStringListKey = (ObjKey: Form | null, index: number): string => sn.debug_GetStringListKey(ObjKey, index)
export const debug_GetFormListKey = (ObjKey: Form | null, index: number): string => sn.debug_GetFormListKey(ObjKey, index)

/** Storage functions - separate file. These are shared in all save games. Values are loaded and saved
*    when savegame is loaded or saved.
* 
*    DEPRECATED v2.9: Replaced by JsonUtil functions. Existing functions here have been proxied to a shared
*    json file to maintain compatibility.
*/

/** Currently no longer implemented, unknown if/when they will return.
*/
